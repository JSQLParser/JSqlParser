/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2014 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */

options{
    IGNORE_CASE = true ;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
	CACHE_TOKENS = false;
//  FORCE_LA_CHECK = true;
    UNICODE_INPUT = true;
	JAVA_TEMPLATE_TYPE = "modern";
	JDK_VERSION = "1.7";
    TOKEN_EXTENDS = "BaseToken";
    COMMON_TOKEN_ACTION = true;
	NODE_DEFAULT_VOID = true;
	TRACK_TOKENS = true;
	VISITOR = true;
}

PARSER_BEGIN(CCJSqlParser)
/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2014 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */

package net.sf.jsqlparser.parser;

import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.upsert.*;
import net.sf.jsqlparser.statement.merge.*;
import java.util.*;

/**
 * The parser generated by JavaCC
 */
public class CCJSqlParser {
    int jdbcParameterIndex = 0;
    boolean errorRecovery = false;
    List<ParseException> parseErrors = new ArrayList<ParseException>();

    private void linkAST(ASTNodeAccess access, SimpleNode node) {
        access.setASTNode(node);
        node.jjtSetValue(access);
    }

    public Node getASTRoot() {
        return jjtree.rootNode();
    }

    public void setErrorRecovery(boolean errorRecovery) {
        this.errorRecovery = errorRecovery;
    }

    public List<ParseException> getParseErrors() {
        return parseErrors;
    }
}

PARSER_END(CCJSqlParser)

TOKEN_MGR_DECLS : {
    public void CommonTokenAction(Token t)
	{
		t.absoluteBegin = getCurrentTokenAbsolutePosition();
		t.absoluteEnd = t.absoluteBegin + t.image.length();
	}

	public int getCurrentTokenAbsolutePosition()
	{
		if (input_stream instanceof SimpleCharStream)
			return ((SimpleCharStream)input_stream).getAbsoluteTokenBegin();
		return -1;
	}
}

SKIP:
{
    <WHITESPACE: " " | "\t" | "\r" | "\n">
}

TOKEN: /* SQL Keywords. prefixed with K_ to avoid name clashes */
{
    <K_ACTION: "ACTION">
|   <K_ADD:"ADD">
|   <K_ALL:"ALL">
|   <K_ALTER:"ALTER">
|   <K_AND:"AND">
|   <K_AND_OPERATOR:"&&">
|   <K_ANY:"ANY">
|   <K_AS: "AS">
|   <K_ASC:"ASC">
|   <K_BEGIN:"BEGIN">
|   <K_BETWEEN:"BETWEEN">
|   <K_BINARY: "BINARY">  
|   <K_BIT:"BIT">
|   <K_BY:"BY">
|   <K_BYTE: "BYTE">
|   <K_CALL : "CALL">
|   <K_CASCADE: "CASCADE">
|   <K_CASE:"CASE">
|   <K_CAST:"CAST">
|   <K_CHARACTER:"CHARACTER">
|   <K_CHECK:"CHECK">
|   <K_CHAR:"CHAR">
|   <K_COLUMN:"COLUMN">
|   <K_COMMIT:"COMMIT">
|   <K_CONNECT:"CONNECT">
|   <K_CONSTRAINT:"CONSTRAINT">
|   <K_CREATE:"CREATE">
|   <K_CROSS:"CROSS">
|   <K_CURRENT: "CURRENT">
|   <K_DATETIMELITERAL : ("DATE" | "TIME" | "TIMESTAMP") >
|   <K_DEFERRABLE : "DEFERRABLE">
|   <K_DELAYED : "DELAYED">
|   <K_DELETE:"DELETE">
|   <K_DESC:"DESC">
|   <K_DISABLE : "DISABLE">
|   <K_DISTINCT:"DISTINCT">
|   <K_DO:"DO">
|   <K_DOUBLE : "DOUBLE">
|   <K_DROP:"DROP">
|   <K_DUPLICATE: "DUPLICATE">
|   <K_ELSE:"ELSE">
|   <K_ENABLE : "ENABLE">
|   <K_END:"END">
|   <K_ESCAPE:"ESCAPE">
|   <K_EXCEPT:"EXCEPT">
|   <K_EXCLUDE : "EXCLUDE">
|   <K_EXEC: "EXEC">
|   <K_EXECUTE: "EXECUTE">
|   <K_EXISTS:"EXISTS">
|   <K_EXTRACT:"EXTRACT">
|   <K_FETCH:"FETCH">
|   <K_FIRST: "FIRST">
|   <K_FOLLOWING: "FOLLOWING">
|   <K_FOR:"FOR">
|   <K_FORCE : "FORCE">
|   <K_FOREIGN:"FOREIGN">
|   <K_FROM:"FROM">
|   <K_FULL:"FULL">
|   <K_FULLTEXT:"FULLTEXT">
|   <K_GROUP:"GROUP">
|   <K_GROUP_CONCAT:"GROUP_CONCAT">
|   <K_HAVING:"HAVING">
|   <K_HIGH_PRIORITY : "HIGH_PRIORITY">
|   <K_IF:"IF">
|   <K_IGNORE : "IGNORE">
|   <K_ILIKE:"ILIKE">
|   <K_IN:"IN">
|   <K_INDEX: "INDEX">
|   <K_INNER:"INNER">
|   <K_INSERT:"INSERT">
|   <K_INTERSECT:"INTERSECT">
|   <K_INTERVAL:"INTERVAL">
|   <K_INTO:"INTO">
|   <K_IS:"IS">
|   <K_ISNULL:"ISNULL">
|   <K_JOIN:"JOIN">
|   <K_KEEP:"KEEP">
|   <K_KEY:"KEY">
|   <K_LAST: "LAST">
|   <K_LATERAL:"LATERAL">
|   <K_LEFT:"LEFT">
|   <K_LIKE:"LIKE">
|   <K_LIMIT:"LIMIT">
|   <K_LOW_PRIORITY : "LOW_PRIORITY">
|   <K_MATCHED: "MATCHED">
|   <K_MATERIALIZED:"MATERIALIZED">
|   <K_MERGE: "MERGE">
|   <K_MINUS:"MINUS">
|   <K_MODIFY: "MODIFY">
|   <K_NATURAL:"NATURAL">
|   <K_NEXT:"NEXT">
|   <K_NO:"NO">
|   <K_NOCYCLE:"NOCYCLE">
|   <K_NOT:"NOT">
|   <K_NOVALIDATE : "NOVALIDATE">
|   <K_NULL:"NULL">
|   <K_NULLS: "NULLS">
|   <K_OF:"OF">
|   <K_OFFSET:"OFFSET">
|   <K_ON:"ON">
|   <K_ONLY:"ONLY">
|   <K_OPEN:"OPEN">
|   <K_OR:"OR">
|   <K_ORDER:"ORDER">
|   <K_OUTER:"OUTER">
|   <K_OVER:"OVER">
|   <K_PARTITION:"PARTITION">
|   <K_PERCENT:"PERCENT">
|   <K_PIVOT:"PIVOT">
|   <K_PRECEDING: "PRECEDING">
|   <K_PRECISION : "PRECISION">
|   <K_PRIMARY:"PRIMARY">
|   <K_PRIOR:"PRIOR">
|   <K_RANGE: "RANGE">
|   <K_RECURSIVE:"RECURSIVE">
|   <K_REFERENCES:"REFERENCES">
|   <K_REGEXP: "REGEXP">
|   <K_RLIKE: "RLIKE">
|   <K_REPLACE:"REPLACE">
|   <K_RESTRICT: "RESTRICT">
|   <K_RETURNING: "RETURNING"> 
|   <K_RIGHT:"RIGHT">
|   <K_ROW: "ROW"> 
|   <K_ROWS: "ROWS">
|   <K_SELECT: ("SELECT" | "SEL")>
|   <K_SEMI : "SEMI">
|   <K_SEPARATOR:"SEPARATOR">
|   <K_SET:"SET">
|   <K_SIBLINGS:"SIBLINGS">
|   <K_SKIP: "SKIP">
|   <K_SOME:"SOME">
|   <K_START:"START">
|   <K_TABLE:"TABLE">
|   <K_TABLESPACE : "TABLESPACE">
|   <K_THEN:"THEN">
|   <K_TEMP:"TEMP">
|   <K_TEMPORARY:"TEMPORARY">
|   <K_TIME_KEY_EXPR : ( "CURRENT_TIMESTAMP" | "CURRENT_TIME" | "CURRENT_DATE" ) ( "()" )?>
|   <K_TOP:"TOP">
|   <K_TRUNCATE:"TRUNCATE">
|   <K_UNBOUNDED: "UNBOUNDED"> 
|   <K_UNION:"UNION">
|   <K_UNIQUE:"UNIQUE">
|   <K_UNLOGGED: "UNLOGGED">
|   <K_UPDATE:"UPDATE">
|   <K_UPSERT:"UPSERT">
|   <K_USE : "USE">
|   <K_SQL_CALC_FOUND_ROWS: "SQL_CALC_FOUND_ROWS">
|   <K_SQL_NO_CACHE: "SQL_NO_CACHE">
|   <K_USING:"USING">
|   <K_UNSIGNED:"UNSIGNED">
|   <K_VALIDATE : "VALIDATE">
|   <K_VALUE:"VALUE">
|   <K_VALUES:"VALUES">
|   <K_VARYING:"VARYING">
|   <K_VIEW:"VIEW">
|   <K_WAIT : "WAIT">
|   <K_WHEN:"WHEN">
|   <K_WHERE:"WHERE">
|   <K_WITH:"WITH">
|   <K_WITHIN:"WITHIN">
|   <K_WITHOUT:"WITHOUT">
|   <K_XML:"XML">
|   <K_ZONE:"ZONE">
}

TOKEN : /* Stuff */
{
    <ST_SEMICOLON : ";" >
}

TOKEN : /* Operators */
{
    <OP_GREATERTHANEQUALS: ">" (<WHITESPACE>)* "=">
|    <OP_MINORTHANEQUALS: "<" (<WHITESPACE>)* "=">
|    <OP_NOTEQUALSSTANDARD: "<" (<WHITESPACE>)* ">">
|    <OP_NOTEQUALSBANG: "!" (<WHITESPACE>)* "=">
|    <OP_CONCAT: "|" (<WHITESPACE>)* "|">
}

TOKEN : /* Date/Time with time zones */
{
    <DT_ZONE: <K_DATETIMELITERAL> (<WHITESPACE>)* ("(" <S_LONG> ")")? (<WHITESPACE>)* (<K_WITH> | <K_WITHOUT>) (<WHITESPACE>)+ "TIME" (<WHITESPACE>)+ <K_ZONE>>
}

TOKEN : /* Numeric Constants */
{
   < S_DOUBLE: ((<S_LONG>)? "." <S_LONG> ( ["e","E"] (["+", "-"])? <S_LONG>)?
            |
            <S_LONG> "." (["e","E"] (["+", "-"])? <S_LONG>)?
            |
            <S_LONG> ["e","E"] (["+", "-"])? <S_LONG>
            )>
  |     < S_LONG: ( <DIGIT> )+ >
  |     < #DIGIT: ["0" - "9"] >
  |     < S_HEX: ("x'" ( <HEX_VALUE> )+ "'" | "0x" ( <HEX_VALUE> )+ ) >
  |     < #HEX_VALUE: ["0"-"9","A"-"F"]  >
}

SPECIAL_TOKEN:
{
   < LINE_COMMENT: "--"(~["\r","\n"])*>
|  < MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN:
{
<S_IDENTIFIER: <LETTER> (<PART_LETTER>)*>
|   <#LETTER: ["$","A"-"Z","_","#","a"-"z","\u00a2"-"\u00a5","\u00aa","\u00b5","\u00ba","\u00c0"-"\u00d6","\u00d8"-"\u00f6","\u00f8"-"\u021f","\u0222"-"\u0233","\u0250"-"\u02ad","\u02b0"-"\u02b8","\u02bb"-"\u02c1","\u02d0"-"\u02d1","\u02e0"-"\u02e4","\u02ee","\u037a","\u0386","\u0388"-"\u038a","\u038c","\u038e"-"\u03a1","\u03a3"-"\u03ce","\u03d0"-"\u03d7","\u03da"-"\u03f3","\u0400"-"\u0481","\u048c"-"\u04c4","\u04c7"-"\u04c8","\u04cb"-"\u04cc","\u04d0"-"\u04f5","\u04f8"-"\u04f9","\u0531"-"\u0556","\u0559","\u0561"-"\u0587","\u05d0"-"\u05ea","\u05f0"-"\u05f2","\u0621"-"\u063a","\u0640"-"\u064a","\u0671"-"\u06d3","\u06d5","\u06e5"-"\u06e6","\u06fa"-"\u06fc","\u0710","\u0712"-"\u072c","\u0780"-"\u07a5","\u0905"-"\u0939","\u093d","\u0950","\u0958"-"\u0961","\u0985"-"\u098c","\u098f"-"\u0990","\u0993"-"\u09a8","\u09aa"-"\u09b0","\u09b2","\u09b6"-"\u09b9","\u09dc"-"\u09dd","\u09df"-"\u09e1","\u09f0"-"\u09f3","\u0a05"-"\u0a0a","\u0a0f"-"\u0a10","\u0a13"-"\u0a28","\u0a2a"-"\u0a30","\u0a32"-"\u0a33","\u0a35"-"\u0a36","\u0a38"-"\u0a39","\u0a59"-"\u0a5c","\u0a5e","\u0a72"-"\u0a74","\u0a85"-"\u0a8b","\u0a8d","\u0a8f"-"\u0a91","\u0a93"-"\u0aa8","\u0aaa"-"\u0ab0","\u0ab2"-"\u0ab3","\u0ab5"-"\u0ab9","\u0abd","\u0ad0","\u0ae0","\u0b05"-"\u0b0c","\u0b0f"-"\u0b10","\u0b13"-"\u0b28","\u0b2a"-"\u0b30","\u0b32"-"\u0b33","\u0b36"-"\u0b39","\u0b3d","\u0b5c"-"\u0b5d","\u0b5f"-"\u0b61","\u0b85"-"\u0b8a","\u0b8e"-"\u0b90","\u0b92"-"\u0b95","\u0b99"-"\u0b9a","\u0b9c","\u0b9e"-"\u0b9f","\u0ba3"-"\u0ba4","\u0ba8"-"\u0baa","\u0bae"-"\u0bb5","\u0bb7"-"\u0bb9","\u0c05"-"\u0c0c","\u0c0e"-"\u0c10","\u0c12"-"\u0c28","\u0c2a"-"\u0c33","\u0c35"-"\u0c39","\u0c60"-"\u0c61","\u0c85"-"\u0c8c","\u0c8e"-"\u0c90","\u0c92"-"\u0ca8","\u0caa"-"\u0cb3","\u0cb5"-"\u0cb9","\u0cde","\u0ce0"-"\u0ce1","\u0d05"-"\u0d0c","\u0d0e"-"\u0d10","\u0d12"-"\u0d28","\u0d2a"-"\u0d39","\u0d60"-"\u0d61","\u0d85"-"\u0d96","\u0d9a"-"\u0db1","\u0db3"-"\u0dbb","\u0dbd","\u0dc0"-"\u0dc6","\u0e01"-"\u0e30","\u0e32"-"\u0e33","\u0e3f"-"\u0e46","\u0e81"-"\u0e82","\u0e84","\u0e87"-"\u0e88","\u0e8a","\u0e8d","\u0e94"-"\u0e97","\u0e99"-"\u0e9f","\u0ea1"-"\u0ea3","\u0ea5","\u0ea7","\u0eaa"-"\u0eab","\u0ead"-"\u0eb0","\u0eb2"-"\u0eb3","\u0ebd","\u0ec0"-"\u0ec4","\u0ec6","\u0edc"-"\u0edd","\u0f00","\u0f40"-"\u0f47","\u0f49"-"\u0f6a","\u0f88"-"\u0f8b","\u1000"-"\u1021","\u1023"-"\u1027","\u1029"-"\u102a","\u1050"-"\u1055","\u10a0"-"\u10c5","\u10d0"-"\u10f6","\u1100"-"\u1159","\u115f"-"\u11a2","\u11a8"-"\u11f9","\u1200"-"\u1206","\u1208"-"\u1246","\u1248","\u124a"-"\u124d","\u1250"-"\u1256","\u1258","\u125a"-"\u125d","\u1260"-"\u1286","\u1288","\u128a"-"\u128d","\u1290"-"\u12ae","\u12b0","\u12b2"-"\u12b5","\u12b8"-"\u12be","\u12c0","\u12c2"-"\u12c5","\u12c8"-"\u12ce","\u12d0"-"\u12d6","\u12d8"-"\u12ee","\u12f0"-"\u130e","\u1310","\u1312"-"\u1315","\u1318"-"\u131e","\u1320"-"\u1346","\u1348"-"\u135a","\u13a0"-"\u13f4","\u1401"-"\u166c","\u166f"-"\u1676","\u1681"-"\u169a","\u16a0"-"\u16ea","\u1780"-"\u17b3","\u17db","\u1820"-"\u1877","\u1880"-"\u18a8","\u1e00"-"\u1e9b","\u1ea0"-"\u1ef9","\u1f00"-"\u1f15","\u1f18"-"\u1f1d","\u1f20"-"\u1f45","\u1f48"-"\u1f4d","\u1f50"-"\u1f57","\u1f59","\u1f5b","\u1f5d","\u1f5f"-"\u1f7d","\u1f80"-"\u1fb4","\u1fb6"-"\u1fbc","\u1fbe","\u1fc2"-"\u1fc4","\u1fc6"-"\u1fcc","\u1fd0"-"\u1fd3","\u1fd6"-"\u1fdb","\u1fe0"-"\u1fec","\u1ff2"-"\u1ff4","\u1ff6"-"\u1ffc","\u203f"-"\u2040","\u207f","\u20a0"-"\u20af","\u2102","\u2107","\u210a"-"\u2113","\u2115","\u2119"-"\u211d","\u2124","\u2126","\u2128","\u212a"-"\u212d","\u212f"-"\u2131","\u2133"-"\u2139","\u2160"-"\u2183","\u3005"-"\u3007","\u3021"-"\u3029","\u3031"-"\u3035","\u3038"-"\u303a","\u3041"-"\u3094","\u309d"-"\u309e","\u30a1"-"\u30fe","\u3105"-"\u312c","\u3131"-"\u318e","\u31a0"-"\u31b7","\u3400"-"\u4db5","\u4e00"-"\u9fa5","\ua000"-"\ua48c","\uac00"-"\ud7a3","\uf900"-"\ufa2d","\ufb00"-"\ufb06","\ufb13"-"\ufb17","\ufb1d","\ufb1f"-"\ufb28","\ufb2a"-"\ufb36","\ufb38"-"\ufb3c","\ufb3e","\ufb40"-"\ufb41","\ufb43"-"\ufb44","\ufb46"-"\ufbb1","\ufbd3"-"\ufd3d","\ufd50"-"\ufd8f","\ufd92"-"\ufdc7","\ufdf0"-"\ufdfb","\ufe33"-"\ufe34","\ufe4d"-"\ufe4f","\ufe69","\ufe70"-"\ufe72","\ufe74","\ufe76"-"\ufefc","\uff04","\uff21"-"\uff3a","\uff3f","\uff41"-"\uff5a","\uff65"-"\uffbe","\uffc2"-"\uffc7","\uffca"-"\uffcf","\uffd2"-"\uffd7","\uffda"-"\uffdc","\uffe0"-"\uffe1","\uffe5"-"\uffe6"]>
|   <#PART_LETTER: ["\u0000"-"\b","\u000e"-"\u001b","$","#","@","0"-"9","A"-"Z","_","a"-"z","\u007f"-"\u009f","\u00a2"-"\u00a5","\u00aa","\u00b5","\u00ba","\u00c0"-"\u00d6","\u00d8"-"\u00f6","\u00f8"-"\u021f","\u0222"-"\u0233","\u0250"-"\u02ad","\u02b0"-"\u02b8","\u02bb"-"\u02c1","\u02d0"-"\u02d1","\u02e0"-"\u02e4","\u02ee","\u0300"-"\u034e","\u0360"-"\u0362","\u037a","\u0386","\u0388"-"\u038a","\u038c","\u038e"-"\u03a1","\u03a3"-"\u03ce","\u03d0"-"\u03d7","\u03da"-"\u03f3","\u0400"-"\u0481","\u0483"-"\u0486","\u048c"-"\u04c4","\u04c7"-"\u04c8","\u04cb"-"\u04cc","\u04d0"-"\u04f5","\u04f8"-"\u04f9","\u0531"-"\u0556","\u0559","\u0561"-"\u0587","\u0591"-"\u05a1","\u05a3"-"\u05b9","\u05bb"-"\u05bd","\u05bf","\u05c1"-"\u05c2","\u05c4","\u05d0"-"\u05ea","\u05f0"-"\u05f2","\u0621"-"\u063a","\u0640"-"\u0655","\u0660"-"\u0669","\u0670"-"\u06d3","\u06d5"-"\u06dc","\u06df"-"\u06e8","\u06ea"-"\u06ed","\u06f0"-"\u06fc","\u070f"-"\u072c","\u0730"-"\u074a","\u0780"-"\u07b0","\u0901"-"\u0903","\u0905"-"\u0939","\u093c"-"\u094d","\u0950"-"\u0954","\u0958"-"\u0963","\u0966"-"\u096f","\u0981"-"\u0983","\u0985"-"\u098c","\u098f"-"\u0990","\u0993"-"\u09a8","\u09aa"-"\u09b0","\u09b2","\u09b6"-"\u09b9","\u09bc","\u09be"-"\u09c4","\u09c7"-"\u09c8","\u09cb"-"\u09cd","\u09d7","\u09dc"-"\u09dd","\u09df"-"\u09e3","\u09e6"-"\u09f3","\u0a02","\u0a05"-"\u0a0a","\u0a0f"-"\u0a10","\u0a13"-"\u0a28","\u0a2a"-"\u0a30","\u0a32"-"\u0a33","\u0a35"-"\u0a36","\u0a38"-"\u0a39","\u0a3c","\u0a3e"-"\u0a42","\u0a47"-"\u0a48","\u0a4b"-"\u0a4d","\u0a59"-"\u0a5c","\u0a5e","\u0a66"-"\u0a74","\u0a81"-"\u0a83","\u0a85"-"\u0a8b","\u0a8d","\u0a8f"-"\u0a91","\u0a93"-"\u0aa8","\u0aaa"-"\u0ab0","\u0ab2"-"\u0ab3","\u0ab5"-"\u0ab9","\u0abc"-"\u0ac5","\u0ac7"-"\u0ac9","\u0acb"-"\u0acd","\u0ad0","\u0ae0","\u0ae6"-"\u0aef","\u0b01"-"\u0b03","\u0b05"-"\u0b0c","\u0b0f"-"\u0b10","\u0b13"-"\u0b28","\u0b2a"-"\u0b30","\u0b32"-"\u0b33","\u0b36"-"\u0b39","\u0b3c"-"\u0b43","\u0b47"-"\u0b48","\u0b4b"-"\u0b4d","\u0b56"-"\u0b57","\u0b5c"-"\u0b5d","\u0b5f"-"\u0b61","\u0b66"-"\u0b6f","\u0b82"-"\u0b83","\u0b85"-"\u0b8a","\u0b8e"-"\u0b90","\u0b92"-"\u0b95","\u0b99"-"\u0b9a","\u0b9c","\u0b9e"-"\u0b9f","\u0ba3"-"\u0ba4","\u0ba8"-"\u0baa","\u0bae"-"\u0bb5","\u0bb7"-"\u0bb9","\u0bbe"-"\u0bc2","\u0bc6"-"\u0bc8","\u0bca"-"\u0bcd","\u0bd7","\u0be7"-"\u0bef","\u0c01"-"\u0c03","\u0c05"-"\u0c0c","\u0c0e"-"\u0c10","\u0c12"-"\u0c28","\u0c2a"-"\u0c33","\u0c35"-"\u0c39","\u0c3e"-"\u0c44","\u0c46"-"\u0c48","\u0c4a"-"\u0c4d","\u0c55"-"\u0c56","\u0c60"-"\u0c61","\u0c66"-"\u0c6f","\u0c82"-"\u0c83","\u0c85"-"\u0c8c","\u0c8e"-"\u0c90","\u0c92"-"\u0ca8","\u0caa"-"\u0cb3","\u0cb5"-"\u0cb9","\u0cbe"-"\u0cc4","\u0cc6"-"\u0cc8","\u0cca"-"\u0ccd","\u0cd5"-"\u0cd6","\u0cde","\u0ce0"-"\u0ce1","\u0ce6"-"\u0cef","\u0d02"-"\u0d03","\u0d05"-"\u0d0c","\u0d0e"-"\u0d10","\u0d12"-"\u0d28","\u0d2a"-"\u0d39","\u0d3e"-"\u0d43","\u0d46"-"\u0d48","\u0d4a"-"\u0d4d","\u0d57","\u0d60"-"\u0d61","\u0d66"-"\u0d6f","\u0d82"-"\u0d83","\u0d85"-"\u0d96","\u0d9a"-"\u0db1","\u0db3"-"\u0dbb","\u0dbd","\u0dc0"-"\u0dc6","\u0dca","\u0dcf"-"\u0dd4","\u0dd6","\u0dd8"-"\u0ddf","\u0df2"-"\u0df3","\u0e01"-"\u0e3a","\u0e3f"-"\u0e4e","\u0e50"-"\u0e59","\u0e81"-"\u0e82","\u0e84","\u0e87"-"\u0e88","\u0e8a","\u0e8d","\u0e94"-"\u0e97","\u0e99"-"\u0e9f","\u0ea1"-"\u0ea3","\u0ea5","\u0ea7","\u0eaa"-"\u0eab","\u0ead"-"\u0eb9","\u0ebb"-"\u0ebd","\u0ec0"-"\u0ec4","\u0ec6","\u0ec8"-"\u0ecd","\u0ed0"-"\u0ed9","\u0edc"-"\u0edd","\u0f00","\u0f18"-"\u0f19","\u0f20"-"\u0f29","\u0f35","\u0f37","\u0f39","\u0f3e"-"\u0f47","\u0f49"-"\u0f6a","\u0f71"-"\u0f84","\u0f86"-"\u0f8b","\u0f90"-"\u0f97","\u0f99"-"\u0fbc","\u0fc6","\u1000"-"\u1021","\u1023"-"\u1027","\u1029"-"\u102a","\u102c"-"\u1032","\u1036"-"\u1039","\u1040"-"\u1049","\u1050"-"\u1059","\u10a0"-"\u10c5","\u10d0"-"\u10f6","\u1100"-"\u1159","\u115f"-"\u11a2","\u11a8"-"\u11f9","\u1200"-"\u1206","\u1208"-"\u1246","\u1248","\u124a"-"\u124d","\u1250"-"\u1256","\u1258","\u125a"-"\u125d","\u1260"-"\u1286","\u1288","\u128a"-"\u128d","\u1290"-"\u12ae","\u12b0","\u12b2"-"\u12b5","\u12b8"-"\u12be","\u12c0","\u12c2"-"\u12c5","\u12c8"-"\u12ce","\u12d0"-"\u12d6","\u12d8"-"\u12ee","\u12f0"-"\u130e","\u1310","\u1312"-"\u1315","\u1318"-"\u131e","\u1320"-"\u1346","\u1348"-"\u135a","\u1369"-"\u1371","\u13a0"-"\u13f4","\u1401"-"\u166c","\u166f"-"\u1676","\u1681"-"\u169a","\u16a0"-"\u16ea","\u1780"-"\u17d3","\u17db","\u17e0"-"\u17e9","\u180b"-"\u180e","\u1810"-"\u1819","\u1820"-"\u1877","\u1880"-"\u18a9","\u1e00"-"\u1e9b","\u1ea0"-"\u1ef9","\u1f00"-"\u1f15","\u1f18"-"\u1f1d","\u1f20"-"\u1f45","\u1f48"-"\u1f4d","\u1f50"-"\u1f57","\u1f59","\u1f5b","\u1f5d","\u1f5f"-"\u1f7d","\u1f80"-"\u1fb4","\u1fb6"-"\u1fbc","\u1fbe","\u1fc2"-"\u1fc4","\u1fc6"-"\u1fcc","\u1fd0"-"\u1fd3","\u1fd6"-"\u1fdb","\u1fe0"-"\u1fec","\u1ff2"-"\u1ff4","\u1ff6"-"\u1ffc","\u200c"-"\u200f","\u202a"-"\u202e","\u203f"-"\u2040","\u206a"-"\u206f","\u207f","\u20a0"-"\u20af","\u20d0"-"\u20dc","\u20e1","\u2102","\u2107","\u210a"-"\u2113","\u2115","\u2119"-"\u211d","\u2124","\u2126","\u2128","\u212a"-"\u212d","\u212f"-"\u2131","\u2133"-"\u2139","\u2160"-"\u2183","\u3005"-"\u3007","\u3021"-"\u302f","\u3031"-"\u3035","\u3038"-"\u303a","\u3041"-"\u3094","\u3099"-"\u309a","\u309d"-"\u309e","\u30a1"-"\u30fe","\u3105"-"\u312c","\u3131"-"\u318e","\u31a0"-"\u31b7","\u3400"-"\u4db5","\u4e00"-"\u9fa5","\ua000"-"\ua48c","\uac00"-"\ud7a3","\uf900"-"\ufa2d","\ufb00"-"\ufb06","\ufb13"-"\ufb17","\ufb1d"-"\ufb28","\ufb2a"-"\ufb36","\ufb38"-"\ufb3c","\ufb3e","\ufb40"-"\ufb41","\ufb43"-"\ufb44","\ufb46"-"\ufbb1","\ufbd3"-"\ufd3d","\ufd50"-"\ufd8f","\ufd92"-"\ufdc7","\ufdf0"-"\ufdfb","\ufe20"-"\ufe23","\ufe33"-"\ufe34","\ufe4d"-"\ufe4f","\ufe69","\ufe70"-"\ufe72","\ufe74","\ufe76"-"\ufefc","\ufeff","\uff04","\uff10"-"\uff19","\uff21"-"\uff3a","\uff3f","\uff41"-"\uff5a","\uff65"-"\uffbe","\uffc2"-"\uffc7","\uffca"-"\uffcf","\uffd2"-"\uffd7","\uffda"-"\uffdc","\uffe0"-"\uffe1","\uffe5"-"\uffe6","\ufff9"-"\ufffb"]>
|   < S_CHAR_LITERAL: (["U","E","N","R","B"]|"BR")? (("'" ( <ESC> | ~["'", "\\", "\n", "\r"] )* "'") | ("'" ("''" | ~["'"])* "'")) >
|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])+ "\"" | ("`" (~["\n","\r","`"])+ "`") | ( "[" ~["0"-"9","]"] (~["\n","\r","]"])* "]" ) >
|   < #ESC: "\\" ["n","t","b","r","f","\\","'","\""] >
}

Statement Statement() #Statement: 
{ Statement stm = null; } 
{
    try {
        stm = SingleStatement()
        [<ST_SEMICOLON>]
        <EOF>
    } catch (ParseException e) {
        if (errorRecovery) {
            parseErrors.add(e);
            error_skipto(ST_SEMICOLON);
        }
        else 
            throw e;
    }

	{ 
		return stm; 
	}
}

Statement SingleStatement() :
{ Statement stm = null;}
{
    try {
        (
        stm = Select()
        |
        stm = Update()
        |
        stm = Insert()
        |
        stm = Upsert()
        |
        stm = Delete()
        |
        stm = Replace()
        |
        LOOKAHEAD(2)
        stm = AlterTable()
        |
        stm = Merge()
        |
        LOOKAHEAD(CreateIndex())
        stm = CreateIndex()
        |
        LOOKAHEAD(CreateTable())
        stm = CreateTable()
        |
        LOOKAHEAD(CreateView())
        stm = CreateView()
        |
        stm = AlterView()
        |
        stm = Drop()
        |
        stm = Truncate()
        |
        stm = Execute()
        |
        stm = Set()
        |
        stm = Use()
        |
        stm = Commit() 
        )
		{ return stm; }
    } catch (ParseException e) {
        if (errorRecovery) {
            parseErrors.add(e);
            error_skipto(ST_SEMICOLON);
			return null;
        }
        else 
            throw e;
    }
}

Statements Statements() #Statements : 
{ Statements stmts = new Statements();
  List<Statement> list = new ArrayList<Statement>();
  Statement stm; }
{
    (<ST_SEMICOLON>)*
    try {
       stm = SingleStatement() { list.add(stm); }
       ( <ST_SEMICOLON> [stm = SingleStatement() { list.add(stm); }] )*
        <EOF>
    } catch (ParseException e) {
        if (errorRecovery) {
            parseErrors.add(e);
            error_skipto(ST_SEMICOLON);
        }
        else 
            throw e;
    }
    {
        stmts.setStatements(list);
        return stmts;
    }
}

JAVACODE
void error_skipto(int kind) {
  ParseException e = generateParseException();
  System.out.println(e.toString());
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind && t.kind != EOF);
}

SetStatement Set(): {
    String name;
    Expression value;
    boolean useEqual = false;
}
{
    <K_SET> name = RelObjectNameExt() ["=" { useEqual=true; } ] value=SimpleExpression()
    {
        return new SetStatement(name,value).setUseEqual(useEqual);
    }
}

UseStatement Use(): {
    String name;
}
{
    <K_USE> name = RelObjectNameExt()
    {
        return new UseStatement(name);
    }
}

Update Update():
{
    Update update = new Update();
    Table table = null;
    List<Table> tables = new ArrayList<Table>();
    Expression where = null;
    Column tableColumn = null;
    List<Expression> expList = new ArrayList<Expression>();
    List<Column> columns = new ArrayList<Column>();
    Expression value = null;
    FromItem fromItem = null;
    List<Join> joins = null;
    Select select = null;
    Limit limit = null;
    List<OrderByElement> orderByElements;
    boolean useColumnsBrackets = false;
    List<SelectExpressionItem> returning = null;
}
{
    <K_UPDATE> table=TableWithAlias() { tables.add(table); } 
          ("," table=TableWithAlias() { tables.add(table); } )*
    <K_SET> 
    (
    LOOKAHEAD(3) tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); }
        ("," tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); } )*

    |

    ["(" { useColumnsBrackets = true; }] tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* [ ")" ] "="
        "("
        (
            { update.setUseSelect(true); }
            select = Select()
        )
        ")"
   )

   [ <K_FROM>
      fromItem=FromItem()
      joins=JoinsList() ]

   [ where=WhereClause() { update.setWhere(where); } ]

   [ orderByElements = OrderByElements() { update.setOrderByElements(orderByElements); } ]
   [ limit = PlainLimit() { update.setLimit(limit); } ]
   [ <K_RETURNING> (
              "*" { update.setReturningAllColumns(true); }
              | returning=ListExpressionItem()
              )
       ]

   {
           update.setColumns(columns);
           update.setExpressions(expList);
           update.setTables(tables);
        update.setFromItem(fromItem);
        update.setJoins(joins);
        update.setSelect(select);
        update.setUseColumnsBrackets(useColumnsBrackets);
        update.setReturningExpressionList(returning);
        return update;
   }
}

Replace Replace():
{
    Replace replace = new Replace();
    Table table = null;
    Column tableColumn = null;
    Expression value = null;

    List<Column> columns = new ArrayList<Column>();
    List<Expression> expList = new ArrayList<Expression>();
    MultiExpressionList multiExpr = null;
    ItemsList itemsList = null;
    Expression exp = null;
}
{
    <K_REPLACE> [<K_INTO> { replace.setUseIntoTables(true); }] table=Table()

    (
        (
            <K_SET> tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); }
              ("," tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); } )*
             {
                   replace.setExpressions(expList);
             }
        )
        |

        (
             [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
            (
                LOOKAHEAD(2) [<K_VALUES> | <K_VALUE>] "(" exp=PrimaryExpression() { expList.add(exp); }
                        ("," exp=PrimaryExpression()  { expList.add(exp); } )* ")" { itemsList = new ExpressionList(expList); }
                        ("," "(" exp=SimpleExpression() {
                            if (multiExpr==null) {
                                multiExpr=new MultiExpressionList();
                                multiExpr.addExpressionList((ExpressionList)itemsList);
                                itemsList = multiExpr;
                            }
                            expList = new ArrayList<Expression>();
                            expList.add(exp); }
                            ("," exp=SimpleExpression() { expList.add(exp); } )* ")" { multiExpr.addExpressionList(expList); } )*
                |
                    { replace.setUseValues(false); }
                    itemsList=SubSelect()
                    { ((SubSelect)itemsList).setUseBrackets(false); }
            )
            {
                replace.setItemsList(itemsList);
            }
        )
    )
   {
           if (columns.size() > 0)
               replace.setColumns(columns);
           replace.setTable(table);
        return replace;
   }
}

List<SelectExpressionItem> ListExpressionItem():
{
   List<SelectExpressionItem> retval = new ArrayList<SelectExpressionItem>();
   SelectExpressionItem item;
}
{
   item = SelectExpressionItem() {retval.add(item);}
   ("," item = SelectExpressionItem() {retval.add(item);} )*
   { return retval; }
}

Insert Insert():
{
    Insert insert = new Insert();
    Table table = null;
    Column tableColumn = null;
    List<Column> columns = new ArrayList<Column>();
    List<Expression> primaryExpList = new ArrayList<Expression>();
    ItemsList itemsList = null;
    Expression exp = null;
    MultiExpressionList multiExpr = null;
    List<SelectExpressionItem> returning = null;
    Select select = null;
    boolean useValues = true;
    boolean useSelectBrackets = false;
    boolean useDuplicate = false;
    List<Column> duplicateUpdateColumns = null;
    List<Expression> duplicateUpdateExpressionList = null;
    Token tk = null;
    InsertModifierPriority modifierPriority = null;
    boolean modifierIgnore = false;
    boolean useSet = false;
    List<Column> setColumns = new ArrayList<Column>();
    List<Expression> setExpressionList = new ArrayList<Expression>();
    String name = null;
    boolean useAs = false;
}
{
    <K_INSERT>
    [(tk = <K_LOW_PRIORITY> | tk = <K_DELAYED> | tk = <K_HIGH_PRIORITY>)
    {if (tk!=null)
        modifierPriority = InsertModifierPriority.valueOf(tk.image.toUpperCase());
    }]
    [<K_IGNORE>{ modifierIgnore = true; }]
    [<K_INTO>] table=Table()
  
    [ [<K_AS> { useAs = true; } ] name=RelObjectNameWithoutValue() { table.setAlias(new Alias(name,useAs)); }]

     [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
    (
        LOOKAHEAD(2) [<K_VALUES> | <K_VALUE>]  "(" exp=SimpleExpression() { primaryExpList.add(exp); }
                ("," exp=SimpleExpression()  { primaryExpList.add(exp); } )* ")" { itemsList = new ExpressionList(primaryExpList); }
            ("," "(" exp=SimpleExpression() {
                    if (multiExpr==null) {
                        multiExpr=new MultiExpressionList();
                        multiExpr.addExpressionList((ExpressionList)itemsList);
                        itemsList = multiExpr;
                    }
                    primaryExpList = new ArrayList<Expression>();
                    primaryExpList.add(exp); }
                ("," exp=SimpleExpression() { primaryExpList.add(exp); } )* ")" { multiExpr.addExpressionList(primaryExpList); } )*

        |

        (
            LOOKAHEAD(2) "(" { useSelectBrackets = true; }
                { insert.setUseValues(false); }
                select = Select()
            ")"
            |
            { insert.setUseValues(false); }
            select = Select()
        )
        
        |
        
        <K_SET>  
        (
            { 
                useSet = true; 
                insert.setUseValues(false);
            }
            tableColumn=Column() "=" exp=SimpleExpression()
            {
                setColumns = new ArrayList<Column>();
                setExpressionList = new ArrayList<Expression>();
                setColumns.add(tableColumn);
                setExpressionList.add(exp);
            }
            ("," tableColumn=Column() "=" exp=SimpleExpression()
                { setColumns.add(tableColumn);
                setExpressionList.add(exp); } )*
        )
    )

    [ <K_ON> <K_DUPLICATE> <K_KEY> <K_UPDATE>
        { useDuplicate = true; }
      tableColumn=Column() "=" exp=SimpleExpression()
        {
            duplicateUpdateColumns = new ArrayList<Column>();
            duplicateUpdateExpressionList = new ArrayList<Expression>();
            duplicateUpdateColumns.add(tableColumn);
            duplicateUpdateExpressionList.add(exp);
        }
      ("," tableColumn=Column() "=" exp=SimpleExpression()
        { duplicateUpdateColumns.add(tableColumn);
        duplicateUpdateExpressionList.add(exp); } )*]


    [ <K_RETURNING> (
           "*" { insert.setReturningAllColumns(true); }
           | returning=ListExpressionItem()
           )
    ]

    {
        insert.setItemsList(itemsList);
        insert.setUseSelectBrackets(useSelectBrackets);
        insert.setSelect(select);
        insert.setTable(table);
        if (columns.size() > 0)
            insert.setColumns(columns);
        insert.setUseDuplicate(useDuplicate);
        insert.setDuplicateUpdateColumns(duplicateUpdateColumns);
        insert.setDuplicateUpdateExpressionList(duplicateUpdateExpressionList);
        insert.setReturningExpressionList(returning);
        insert.setModifierPriority(modifierPriority);
        insert.setModifierIgnore(modifierIgnore);
        insert.setUseSet(useSet);
        insert.setSetColumns(setColumns);
        insert.setSetExpressionList(setExpressionList);
        return insert;
    }
}

Upsert Upsert():
{
    Upsert upsert = new Upsert();
    Table table = null;
    Column tableColumn = null;
    List<Column> columns = new ArrayList<Column>();
    List<Expression> primaryExpList = new ArrayList<Expression>();
    ItemsList itemsList = null;
    Expression exp = null;
    MultiExpressionList multiExpr = null;
    List<SelectExpressionItem> returning = null;
    Select select = null;
    boolean useSelectBrackets = false;
    boolean useDuplicate = false;
    List<Column> duplicateUpdateColumns = null;
    List<Expression> duplicateUpdateExpressionList = null;
    Token tk = null;
}
{
    <K_UPSERT>
    [<K_INTO>] table=Table()


     [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
    (
        LOOKAHEAD(2) [<K_VALUES> | <K_VALUE>]  "(" exp=SimpleExpression() { primaryExpList.add(exp); }
                ("," exp=SimpleExpression()  { primaryExpList.add(exp); } )* ")" { itemsList = new ExpressionList(primaryExpList); }
            ("," "(" exp=SimpleExpression() {
                    if (multiExpr==null) {
                        multiExpr=new MultiExpressionList();
                        multiExpr.addExpressionList((ExpressionList)itemsList);
                        itemsList = multiExpr;
                    }
                    primaryExpList = new ArrayList<Expression>();
                    primaryExpList.add(exp); }
                ("," exp=SimpleExpression() { primaryExpList.add(exp); } )* ")" { multiExpr.addExpressionList(primaryExpList); } )*

        |

        (
            LOOKAHEAD(2) "(" { useSelectBrackets = true; }
                { upsert.setUseValues(false); }
                select = Select()
            ")"
            |
            { upsert.setUseValues(false); }
            select = Select()
        )
    )

    [ <K_ON> <K_DUPLICATE> <K_KEY> <K_UPDATE>
        { useDuplicate = true; }
      tableColumn=Column() "=" exp=SimpleExpression()
        {
            duplicateUpdateColumns = new ArrayList<Column>();
            duplicateUpdateExpressionList = new ArrayList<Expression>();
            duplicateUpdateColumns.add(tableColumn);
            duplicateUpdateExpressionList.add(exp);
        }
      ("," tableColumn=Column() "=" exp=SimpleExpression()
        { duplicateUpdateColumns.add(tableColumn);
        duplicateUpdateExpressionList.add(exp); } )*]

    {
        upsert.setItemsList(itemsList);
        upsert.setUseSelectBrackets(useSelectBrackets);
        upsert.setSelect(select);
        upsert.setTable(table);
        if (columns.size() > 0) {
            upsert.setColumns(columns);
        }
        upsert.setUseDuplicate(useDuplicate);
        upsert.setDuplicateUpdateColumns(duplicateUpdateColumns);
        upsert.setDuplicateUpdateExpressionList(duplicateUpdateExpressionList);
        return upsert;
    }
}

Delete Delete():
{
    Delete delete = new Delete();
    Table table = null;
    List<Table> tables = new ArrayList<Table>();
    List<Join> joins = null;
    Expression where = null;
    Limit limit = null;
    List<OrderByElement> orderByElements;
}
{
    <K_DELETE> [LOOKAHEAD(2) (table=TableWithAlias() { tables.add(table); } 
          ("," table=TableWithAlias() { tables.add(table); } )* 
    <K_FROM> | <K_FROM>)]

    [ table=TableWithAlias()
      joins=JoinsList() ]
    [where=WhereClause() { delete.setWhere(where); } ]
    [orderByElements = OrderByElements() { delete.setOrderByElements(orderByElements); } ]
    [limit=PlainLimit() {delete.setLimit(limit); } ]
    {
          delete.setTables(tables);
        if (joins != null && joins.size() > 0)
            delete.setJoins(joins);
        delete.setTable(table);
        return delete;
    }
}

Statement Merge() : {
    Merge merge = new Merge();
    Table table;
    SubSelect select;
    Alias alias;
    Expression condition;
    MergeUpdate update;
    MergeInsert insert;
}
{
    <K_MERGE> <K_INTO> table=TableWithAlias() { merge.setTable(table); }
    <K_USING> 
        ( table=Table() { merge.setUsingTable(table); } 
            | "(" select=SubSelect() { merge.setUsingSelect(select); } ")" )
     [ alias = Alias() { merge.setUsingAlias(alias); } ] <K_ON> 
       "(" condition = Expression() { merge.setOnCondition(condition); } ")"

    [
        ( LOOKAHEAD(2) update = MergeUpdateClause() { merge.setMergeUpdate(update); }
          [ insert = MergeInsertClause() { merge.setMergeInsert(insert); } ]
        | insert = MergeInsertClause() { merge.setMergeInsert(insert); merge.setInsertFirst(true); }
          [ update = MergeUpdateClause() { merge.setMergeUpdate(update); } ]
        )
    ]


    /*[ LOOKAHEAD(2) update = MergeUpdateClause() { merge.setMergeUpdate(update); } ]
 
    [ insert = MergeInsertClause() { merge.setMergeInsert(insert); } ]*/
    
    { return merge; }
}
    
MergeUpdate MergeUpdateClause() : {
    MergeUpdate mu = new MergeUpdate();
    List<Column> columns = new ArrayList<Column>();
    List<Expression> expList = new ArrayList<Expression>();
    Column col;
    Expression exp;
    Expression condition;
}
{
  <K_WHEN> <K_MATCHED> <K_THEN>  <K_UPDATE> 
    <K_SET> 
     col = Column() "=" exp = SimpleExpression() 
            { columns.add(col); expList.add(exp); } 
        ("," col = Column() "=" exp = SimpleExpression() { columns.add(col); expList.add(exp); } )* 

        { mu.setColumns(columns); mu.setValues(expList); }

        [ <K_WHERE> condition = Expression() { mu.setWhereCondition(condition); }]
        [ <K_DELETE> <K_WHERE> condition = Expression() { mu.setDeleteWhereCondition(condition); } ]

        { return mu; }
}

MergeInsert MergeInsertClause() : {
    MergeInsert mi = new MergeInsert();
    List<Column> columns = new ArrayList<Column>();
    List<Expression> expList = new ArrayList<Expression>();
    Column col;
    Expression exp;
}
{
    <K_WHEN> <K_NOT> <K_MATCHED> <K_THEN> 
        <K_INSERT> "(" col=Column() { columns.add(col); } ("," col=Column() { columns.add(col); } )* ")"  <K_VALUES> 
           "(" exp=SimpleExpression() { expList.add(exp); } ("," exp=SimpleExpression() { expList.add(exp); } )* ")" 
    {
        mi.setColumns(columns);
        mi.setValues(expList);
        return mi;
    }
}

// See: http://technet.microsoft.com/en-us/library/ms187879%28v=sql.105%29.aspx

Column Column() #Column :
{
    //String databaseName = null, schemaName = null, tableName = null, columnName = null;
    String token = null;
    List<String> data = new ArrayList<String>();
}
{
    token = RelObjectName() { data.add(token); }
    ( LOOKAHEAD (2) "." ("." { data.add(null); })* token = RelObjectName() { data.add(token); } ) *

	/*columnName = RelObjectName()
    ( "." [LOOKAHEAD(2) token = RelObjectName()] { tableName = columnName; columnName = token; token = null;} 
		( "." token = RelObjectName() { schemaName = tableName; tableName = columnName; columnName = token; token = null;} 
			( "." token = RelObjectName() { databaseName = schemaName; schemaName = tableName; tableName = columnName; columnName = token; } 
			)?
		)?
	)?
    */

    /*(
          LOOKAHEAD(7) databaseName=RelObjectName() "." [schemaName=RelObjectName()] "." tableName=RelObjectName() "." columnName=RelObjectName()
        | LOOKAHEAD(5) schemaName=RelObjectName() "." tableName=RelObjectName() "." columnName=RelObjectName()
        | LOOKAHEAD(3) tableName=RelObjectName() "." columnName=RelObjectName()
        | columnName=RelObjectName()
    )*/

    {
		/*if (tableName==null && (databaseName!=null || schemaName!=null)) {
			throw generateParseException();
		}*/

        //final Database database = new Database(databaseName);
        //final Table table = new Table(database, schemaName, tableName);
        Column col = new Column(data);
        linkAST(col,jjtThis);
        return col;
    }
}

/*
Not all names should be allowed for aliases.
*/
String RelObjectNameWithoutValue() : 
{    Token tk = null; }
{
    (tk=<S_IDENTIFIER> | tk=<S_QUOTED_IDENTIFIER> | tk=<K_BYTE> | <K_CHAR>
      | tk=<K_CAST> | tk=<K_DO> | tk=<K_EXTRACT> | tk=<K_FIRST> | tk=<K_FOLLOWING> 
      | tk=<K_LAST> | tk=<K_MATERIALIZED> | tk=<K_NULLS> | tk=<K_PARTITION> | tk=<K_RANGE> 
      | tk=<K_ROW> | tk=<K_ROWS> | tk=<K_SIBLINGS> | tk=<K_XML>
      | tk=<K_COLUMN> | tk=<K_REPLACE> | tk=<K_TRUNCATE> | tk=<K_KEY> | tk=<K_ANY>
      | tk=<K_OPEN> | tk=<K_OVER> | tk=<K_PERCENT> | tk=<K_PRIOR>
      | tk=<K_SEPARATOR> | tk=<K_NO> | tk=<K_ACTION> | tk=<K_CASCADE> | tk=<K_END>
      | tk=<K_TABLE> | tk=<K_DATETIMELITERAL> | tk=<K_COMMIT> | tk=<K_PRECISION>
      | tk=<K_INSERT> | tk=<K_INDEX> | tk=<K_PRIMARY> | tk=<K_ENABLE>
	  | tk=<K_UNSIGNED>
      | tk=<K_TEMP> | tk=<K_TEMPORARY> | tk=<K_ISNULL> 
	  | tk=<K_ZONE>
      )

    { return tk.image; }
}

/*
Normal names.
*/
String RelObjectName() :
{    Token tk = null; String result = null; }
{
    (result = RelObjectNameWithoutValue() | tk=<K_VALUE> | tk=<K_VALUES>)

    { 
		if (tk!=null) result=tk.image;
		return result; 
	}
}

/*
Extended version of object names.
*/
String RelObjectNameExt():
{ Token tk = null;
  String result=null;
} 
{
    ( result=RelObjectName() | tk=<K_LEFT> | tk=<K_RIGHT> | tk=<K_SET> | tk=<K_DOUBLE> | tk=<K_IF>)
    {
        if (tk!=null) result=tk.image;
        return result;
    }
}

/*
Extended usage of object names - part 2.
*/
String RelObjectNameExt2():
{ Token tk = null;
  String result=null;
} 
{
    ( result=RelObjectNameExt() | tk=<K_TOP> | tk=<K_FROM> )
    {
        if (tk!=null) result=tk.image;
        return result;
    }
}

Table Table() #Table :
{
    //String serverName = null, databaseName = null, schemaName = null, tableName = null;
    List<String> data = new ArrayList<String>();
    String token;
}
{
    token = RelObjectName() { data.add(token); }
    ( LOOKAHEAD(2) "." ("." { data.add(null); })* token = RelObjectName() { data.add(token); } ) *

   /* (
          LOOKAHEAD(7) serverName=RelObjectName() "." [databaseName=RelObjectName()] "." [schemaName=RelObjectName()] "." tableName=RelObjectName()
        | LOOKAHEAD(5) databaseName=RelObjectName() "." [schemaName=RelObjectName()] "." tableName=RelObjectName()
        | LOOKAHEAD(3) schemaName=RelObjectName() "." tableName=RelObjectName()
        | tableName=RelObjectName()
    )*/
    {
        //final Server server = new Server(serverName);
        //final Database database = new Database(server, databaseName);
        Table table = new Table(data);
        return table;
    }
}

Table TableWithAlias():
{
    Table table = null;
    Alias alias = null;
}
{
    table=Table() [alias=Alias() { table.setAlias(alias); }]
    { return table; }
}

Select Select():
{
    Select select = new Select();
    SelectBody selectBody = null;
    List<WithItem> with = null;
}
{
    [ with=WithList() {  } ] selectBody = SelectBody()
    {
        select.setWithItemsList(with);
        select.setSelectBody(selectBody);
        return select;
    }
}

SelectBody SelectBody():
{ SelectBody selectBody = null; }
{
    selectBody = SetOperationList()
    { return selectBody; }
}

PlainSelect PlainSelect() #PlainSelect:
{
    PlainSelect plainSelect = new PlainSelect();
    List<SelectItem> selectItems = null;
    FromItem fromItem = null;
    List<Join> joins = null;
    List<SelectItem> distinctOn = null;
    Expression where = null;
    List<OrderByElement> orderByElements;
    List<Expression> groupByColumnReferences = null;
    Expression having = null;
    Limit limit = null;
    Offset offset = null;
    Fetch fetch = null;
    Top top = null;
        Skip skip = null;
        First first = null;
    OracleHierarchicalExpression oracleHierarchicalQueryClause = null;
    List<Table> intoTables = null;
    Table updateTable = null;
    Wait wait = null;
    boolean mySqlSqlCalcFoundRows = false;
}
{
    <K_SELECT>

    { plainSelect.setOracleHint(getOracleHint()); }

    [skip = Skip() { plainSelect.setSkip(skip);    } ]

    [LOOKAHEAD(2) first = First() { plainSelect.setFirst(first); } ]

    [
        <K_ALL>
        |
            (
                <K_DISTINCT> { Distinct distinct = new Distinct(); plainSelect.setDistinct(distinct); }
                    [ "ON" "(" distinctOn=SelectItemsList()  { plainSelect.getDistinct().setOnSelectItems(distinctOn); } ")" ]
            )
        |
            (
                <K_UNIQUE> { Distinct distinct = new Distinct(true); plainSelect.setDistinct(distinct); }
            )
        |
            (
                <K_SQL_CALC_FOUND_ROWS> { plainSelect.setMySqlSqlCalcFoundRows(true); }
            )
        |
            (
                <K_SQL_NO_CACHE> { plainSelect.setMySqlSqlNoCache(true); }
            )
    ]

    [top = Top() { plainSelect.setTop(top);    } ]

    selectItems=SelectItemsList()

    [intoTables = IntoClause() { plainSelect.setIntoTables(intoTables); } ]
    [ <K_FROM>
      fromItem=FromItem()
      joins=JoinsList() ]

    [ where=WhereClause() { plainSelect.setWhere(where); }]
    [ oracleHierarchicalQueryClause=OracleHierarchicalQueryClause() { plainSelect.setOracleHierarchical(oracleHierarchicalQueryClause); } ]
    [ groupByColumnReferences=GroupByColumnReferences() { plainSelect.setGroupByColumnReferences(groupByColumnReferences); }]
    [ having=Having() { plainSelect.setHaving(having); }]
    [LOOKAHEAD(<K_ORDER> <K_SIBLINGS> <K_BY>) orderByElements = OrderByElements() { plainSelect.setOracleSiblings(true); plainSelect.setOrderByElements(orderByElements);    }   ]
    [LOOKAHEAD(<K_ORDER> <K_BY>) orderByElements = OrderByElements() { plainSelect.setOrderByElements(orderByElements);    }   ]
    [LOOKAHEAD(<K_LIMIT>) limit = LimitWithOffset() { plainSelect.setLimit(limit);    } ]
    [LOOKAHEAD(<K_OFFSET>) offset = Offset() { plainSelect.setOffset(offset);    } ]
    [LOOKAHEAD(<K_FETCH>) fetch = Fetch() { plainSelect.setFetch(fetch);    } ]

    [ <K_FOR> <K_UPDATE> { plainSelect.setForUpdate(true); }
        [ <K_OF> updateTable = Table() { plainSelect.setForUpdateTable(updateTable); } ]
        [ LOOKAHEAD(<K_WAIT>) wait = Wait() { plainSelect.setWait(wait); } ] ]

    {
        plainSelect.setSelectItems(selectItems);
        plainSelect.setFromItem(fromItem);
        if (joins != null && joins.size() > 0)
            plainSelect.setJoins(joins);
        linkAST(plainSelect,jjtThis);
        return plainSelect;
    }
}

SelectBody SetOperationList() #SetOperationList:
{
    SetOperationList list = new SetOperationList();
    List<OrderByElement> orderByElements = null;
    Limit limit = null;
    Offset offset = null;
    Fetch fetch = null;
    SelectBody select = null;
    List<SelectBody> selects = new ArrayList<SelectBody>();
    List<SetOperation> operations = new ArrayList<SetOperation>();
    List<Boolean> brackets = new ArrayList<Boolean>();
    boolean bracket;
}
{
    (

        (
            (("(" select=SelectBody() ")" { bracket=true;} ) 
                    | select=PlainSelect() { bracket=false;} ) {selects.add(select);brackets.add(bracket); }
            (
                ((<K_UNION> { UnionOp union = new UnionOp();linkAST(union,jjtThis);operations.add(union); } [ <K_ALL> { union.setAll(true); } | <K_DISTINCT> { union.setDistinct(true); } ])
                | <K_INTERSECT> { operations.add(new IntersectOp()); }
                | <K_MINUS> { operations.add(new MinusOp()); }
                | <K_EXCEPT> { operations.add(new ExceptOp()); }
                )

                (("(" select=SelectBody() ")" { bracket=true;} ) | select=PlainSelect() { bracket=false;} ) {selects.add(select);brackets.add(bracket);}
            )*
        )

        [orderByElements=OrderByElements() {list.setOrderByElements(orderByElements);} ]
        [LOOKAHEAD(<K_LIMIT>) limit=LimitWithOffset() {list.setLimit(limit);} ]
        [LOOKAHEAD(<K_OFFSET>) offset = Offset() { list.setOffset(offset);} ]
        [LOOKAHEAD(<K_FETCH>) fetch = Fetch() { list.setFetch(fetch);} ]
    )

    {
        if (selects.size()==1 && selects.get(0) instanceof PlainSelect) {
            if (brackets.get(0)) 
                ((PlainSelect)selects.get(0)).setUseBrackets(true);
            return selects.get(0);
        } else {
            list.setBracketsOpsAndSelects(brackets,selects,operations);
            return list;
        }
    }
}

List<WithItem> WithList():
{
    List<WithItem> withItemsList = new ArrayList<WithItem>();
    WithItem with = null;
}
{
    <K_WITH> with=WithItem() { withItemsList.add(with); } ("," with=WithItem() { withItemsList.add(with); } )*

     { return withItemsList; }
}

WithItem WithItem() #WithItem:
{
    WithItem with = new WithItem();
    String name = null;
    List<SelectItem> selectItems = null;
    SelectBody selectBody = null;
}
{
     [ <K_RECURSIVE> { with.setRecursive(true); } ] name=RelObjectName() { with.setName(name); }
     [ "(" selectItems=SelectItemsList() ")" { with.setWithItemList(selectItems); } ]
     <K_AS>
     "(" selectBody = SelectBody() { with.setSelectBody(selectBody); } ")"
     { return with; }
}

List<SelectItem> SelectItemsList():
{
    List<SelectItem> selectItemsList = new ArrayList<SelectItem>();
    SelectItem selectItem = null;
}
{
    selectItem=SelectItem() { selectItemsList.add(selectItem); } ("," selectItem=SelectItem() { selectItemsList.add(selectItem); } )*

    { return selectItemsList; }
}

SelectExpressionItem SelectExpressionItem():
{
    SelectExpressionItem selectExpressionItem = null;
    Expression expression = null;
    Alias alias = null;
}
{
     expression=SimpleExpression() { selectExpressionItem = new SelectExpressionItem(); selectExpressionItem.setExpression(expression); }
             [alias=Alias() { selectExpressionItem.setAlias(alias); }] { return selectExpressionItem; }
}

SelectItem SelectItem() #SelectItem:
{
    SelectItem selectItem = null;
}
{   ("*" { selectItem = new AllColumns(); }
    |
    LOOKAHEAD(AllTableColumns()) selectItem=AllTableColumns()
    |
    selectItem=SelectExpressionItem() 
    )
    {
        linkAST(selectItem,jjtThis);
        return selectItem;
    }
}

AllTableColumns AllTableColumns():
{
    Table table = null;
}
{
     table=Table() "." "*"
    {
        return new AllTableColumns(table);
    }

}

Alias Alias():
{ String name = null;
  Token token = null;
  boolean useAs = false; }
{
    [<K_AS> { useAs = true; } ] 
	( name=RelObjectName() | token=<S_CHAR_LITERAL> { name=token.image; } )
   { return new Alias(name,useAs); }
}

MySQLIndexHint MySQLIndexHint():
{
	Token actionToken = null;
	Token indexToken = null;
	String indexName = null;
	List<String> indexNameList = new ArrayList<String>();
}
{
	(actionToken = <K_USE>
	| actionToken = <K_IGNORE>
	| actionToken = <K_FORCE> )
	(indexToken = <K_INDEX>
	| indexToken = <K_KEY>)
	"("
	indexName = Identifier() { indexNameList.add(indexName); }
	("," indexName= Identifier() { indexNameList.add(indexName); })*
	")"
	{
		return new MySQLIndexHint(actionToken.image, indexToken.image, indexNameList);
	}
}

String Identifier():
{
	Token tk = null;
}
{
	(tk=<S_IDENTIFIER>
    | tk=<S_QUOTED_IDENTIFIER>)
    { return tk.image; }
}

FunctionItem FunctionItem():
{
    Alias alias = null;
    Function function;
    FunctionItem functionItem;
}
{
    function=Function() { functionItem = new FunctionItem(); functionItem.setFunction(function); }
             [alias=Alias() { functionItem.setAlias(alias); }]
    { return functionItem; }
}

List<Column> PivotForColumns():
{
    List<Column> columns = new ArrayList<Column>();
    Column column;
}
{
    (
        ("(" column = Column() { columns.add(column); }
         ("," column = Column() { columns.add(column); } )*
         ")")
    | column = Column() { columns.add(column); }
    )
    { return columns; }
}

List<FunctionItem> PivotFunctionItems():
{
    List<FunctionItem> functionItems = new ArrayList<FunctionItem>();
    FunctionItem item;
}
{
    item = FunctionItem() {functionItems.add(item);}
    ( "," item = FunctionItem() {functionItems.add(item);} )*
    { return functionItems; }
}

List<SelectExpressionItem> PivotSingleInItems():
{
   List<SelectExpressionItem> retval = new ArrayList<SelectExpressionItem>();
   SelectExpressionItem item;
}
{
   item = SelectExpressionItem() {retval.add(item);}
   ("," item = SelectExpressionItem() {retval.add(item);} )*
   { return retval; }
}

ExpressionListItem ExpressionListItem():
{
    ExpressionListItem expressionListItem = null;
    ExpressionList expressionList = null;
    Alias alias = null;
}
{
    "("
    expressionList=SimpleExpressionList() { expressionListItem = new ExpressionListItem(); expressionListItem.setExpressionList(expressionList); }
    ")"
    [alias=Alias() { expressionListItem.setAlias(alias); }]
    { return expressionListItem; }
}

List<ExpressionListItem> PivotMultiInItems():
{
   List<ExpressionListItem> retval = new ArrayList<ExpressionListItem>();
   ExpressionListItem item;
}
{
   item = ExpressionListItem() {retval.add(item);}
   ("," item = ExpressionListItem() {retval.add(item);} )*
   { return retval; }
}

Pivot Pivot():
{
    Pivot retval = new Pivot();
    List<FunctionItem> functionItems;
    List<Column> forColumns;
    List<SelectExpressionItem> singleInItems = null;
    List<ExpressionListItem> multiInItems = null;
    Alias alias = null;
}
{
    <K_PIVOT> "(" functionItems = PivotFunctionItems() <K_FOR>
    forColumns = PivotForColumns()
    <K_IN> "("
    (LOOKAHEAD(3) singleInItems = PivotSingleInItems()
    | multiInItems = PivotMultiInItems() )
    ")"
    ")"
    [ alias = Alias() ]
    {
        retval.setFunctionItems(functionItems);
        retval.setForColumns(forColumns);
        retval.setSingleInItems(singleInItems);
        retval.setMultiInItems(multiInItems);
        retval.setAlias(alias);
        return retval;
    }
}

PivotXml PivotXml():
{
    PivotXml retval = new PivotXml();
    List<FunctionItem> functionItems;
    List<Column> forColumns;
    List<SelectExpressionItem> singleInItems = null;
    List<ExpressionListItem> multiInItems = null;
    SelectBody inSelect = null;
}
{
    <K_PIVOT> <K_XML> "(" functionItems = PivotFunctionItems() <K_FOR>
    forColumns = PivotForColumns()
    <K_IN> "("
    (
        LOOKAHEAD(2) <K_ANY> { retval.setInAny(true); } |
        LOOKAHEAD(1) inSelect = SelectBody() |
        LOOKAHEAD(2) singleInItems = PivotSingleInItems() |
        multiInItems = PivotMultiInItems()
    )
    ")"
    ")"
    {
        retval.setFunctionItems(functionItems);
        retval.setForColumns(forColumns);
        retval.setSingleInItems(singleInItems);
        retval.setMultiInItems(multiInItems);
        retval.setInSelect(inSelect);
        return retval;
    }
}

List<Table> IntoClause():
{
    List<Table> tables = new ArrayList<Table>();
    Table table;
}
{
    <K_INTO> table=Table() { tables.add(table); } ("," table=Table() { tables.add(table); } )*
    {
        return tables;
    }
}

FromItem FromItem():
{
    FromItem fromItem = null;
    Pivot pivot = null;
    Alias alias = null;
    MySQLIndexHint indexHint = null;
}
{
    (
        LOOKAHEAD(ValuesList()) fromItem=ValuesList()
        |
        (
            (
                (
                    "("
                        (
                        LOOKAHEAD(SubJoin())
                        fromItem=SubJoin()
                        |
                        LOOKAHEAD(3)
                        fromItem=SubSelect()
                        |
                        fromItem=FromItem()
                          { fromItem = new ParenthesisFromItem(fromItem); }
                        )
                    ")"
                )
                |
                LOOKAHEAD(TableFunction())
                fromItem=TableFunction()
                |
                fromItem=Table()
                |
                fromItem=LateralSubSelect()
            )
            [ alias=Alias() { fromItem.setAlias(alias); } ]
			[(LOOKAHEAD(2) pivot=PivotXml()|pivot=Pivot()) { fromItem.setPivot(pivot); } ]
            [
                LOOKAHEAD(2)
                indexHint=MySQLIndexHint() {
                    if (fromItem instanceof Table)
						((Table) fromItem).setHint(indexHint);
                }
            ]
        )
    )
    {
        return fromItem;
    }
}

FromItem ValuesList():
{
    MultiExpressionList exprList = new MultiExpressionList();
    List<Expression> primaryExpList = new ArrayList<Expression>();
    ValuesList valuesList = new ValuesList();
    Expression exp = null;
    List<String> colNames = null;
    String colName;
    Alias alias;
}
{
    "("
    <K_VALUES>
    (LOOKAHEAD(3) ("(" exp=SimpleExpression() { primaryExpList.add(exp); }
            ("," exp=SimpleExpression()  { primaryExpList.add(exp); } )* ")" { exprList.addExpressionList(primaryExpList); }

            ("," "(" exp=SimpleExpression() {
                    primaryExpList = new ArrayList<Expression>();
                    primaryExpList.add(exp); }
                ("," exp=SimpleExpression() { primaryExpList.add(exp); } )* ")" { exprList.addExpressionList(primaryExpList); } )*)
    |
    ( exp=SimpleExpression() { exprList.addExpressionList(exp); valuesList.setNoBrackets(true); }
        ("," exp=SimpleExpression()  { exprList.addExpressionList(exp);} )*
    ))
    ")"

    [ alias=Alias() { valuesList.setAlias(alias); }

        [ "("
            colName = RelObjectName() { colNames = new ArrayList<String>(); colNames.add(colName); }
            ( "," colName = RelObjectName() { colNames.add(colName); } )*
            ")" { valuesList.setColumnNames(colNames); } ]

    ]

    {
        valuesList.setMultiExpressionList(exprList);
        return valuesList;
    }
}

LateralSubSelect LateralSubSelect():
{
    LateralSubSelect lateralSubSelect = new LateralSubSelect();
    SubSelect subSelect = null;
}
{
    <K_LATERAL>
     "(" subSelect=SubSelect() ")"
    {
        lateralSubSelect.setSubSelect(subSelect);
        return lateralSubSelect;
    }
}

FromItem SubJoin():
{
    FromItem fromItem = null;
    Join join = null;
    List joinList = null;
    SubJoin subJoin = new SubJoin();
}
{
    fromItem=FromItem() { subJoin.setLeft(fromItem); }
	joinList=SubJoinsList() { subJoin.setJoinList(joinList); }
    {
        return subJoin;
    }
}

List<Join> JoinsList():
{
    List<Join> joinsList = new ArrayList<Join>();
    Join join = null;
}
{
    (join=JoinerExpression() { joinsList.add(join); })*
    { return joinsList; }
}

List SubJoinsList():
{
    List<Join> joinsList = new ArrayList<Join>();
    Join join = null;
}
{

    (join=JoinerExpression() { joinsList.add(join); })+

    { return joinsList; }
}


Join JoinerExpression() #JoinerExpression:
{
    Join join = new Join();
    FromItem right = null;
    Expression onExpression = null;
    Column tableColumn;
    List<Column> columns = null;
}
{
    [
          <K_LEFT> { join.setLeft(true); } [ <K_SEMI> { join.setSemi(true); } | <K_OUTER> { join.setOuter(true); } ]
          |  ( <K_RIGHT> { join.setRight(true); }
             | <K_FULL> { join.setFull(true); } 
           ) [ <K_OUTER> { join.setOuter(true); } ]
        | <K_INNER> { join.setInner(true); }
        | <K_NATURAL> { join.setNatural(true); }
        | <K_CROSS> { join.setCross(true); } 
    ]

          ( <K_JOIN> | "," { join.setSimple(true); } ) 

        right=FromItem()


    [ 
    LOOKAHEAD(2) (( <K_ON> onExpression=Expression()  { join.setOnExpression(onExpression); } )
        |
        ( <K_USING> "(" tableColumn=Column() { columns = new ArrayList(); columns.add(tableColumn); }
                ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"
          { join.setUsingColumns(columns); }   ))
      ]
  {
      linkAST(join,jjtThis);
      join.setRightItem(right);
    return join; 
  }
}

Expression WhereClause():
{
    Expression retval = null;
}
{
    <K_WHERE> retval=Expression()
    { return retval; }
}

OracleHierarchicalExpression OracleHierarchicalQueryClause():
{
    OracleHierarchicalExpression result = new OracleHierarchicalExpression();
    Expression expr;
}
{
    (
                <K_START> <K_WITH>  expr=AndExpression() {result.setStartExpression(expr);}
                <K_CONNECT> <K_BY> [ <K_NOCYCLE> { result.setNoCycle(true); } ] expr=AndExpression()
                { result.setConnectExpression(expr); }
            |
                <K_CONNECT> <K_BY> [ <K_NOCYCLE> { result.setNoCycle(true); } ] expr=AndExpression()
                { 
                    result.setConnectExpression(expr); 
                    result.setConnectFirst(true);
                }
                [ <K_START> <K_WITH>  expr=AndExpression() {result.setStartExpression(expr);} ]
    )
    {
        return result;
    }
}

List<Expression> GroupByColumnReferences():
{
    Expression columnReference = null;
    List<Expression> columnReferences = new ArrayList<Expression>();
}
{
    <K_GROUP> <K_BY> columnReference=SimpleExpression() {columnReferences.add(columnReference); }
    ("," columnReference=SimpleExpression()  {columnReferences.add(columnReference); } )*
    {
        return columnReferences;
    }
}

Expression Having():
{
    Expression having = null;
}
{
    <K_HAVING> having=Expression()
    {
        return having;
    }
}

List<OrderByElement> OrderByElements():
{
    List<OrderByElement> orderByList = new ArrayList<OrderByElement>();
    OrderByElement orderByElement = null;
}
{
    <K_ORDER> [ <K_SIBLINGS> ] <K_BY> orderByElement=OrderByElement() { orderByList.add(orderByElement); }
        ("," orderByElement=OrderByElement() { orderByList.add(orderByElement); } )*
    {
        return orderByList;
    }
}

OrderByElement OrderByElement():
{
    OrderByElement orderByElement = new OrderByElement();
    Expression columnReference = null;
}
{
    columnReference = SimpleExpression()
    [ ( <K_ASC> | (<K_DESC> { orderByElement.setAsc(false); } )) { orderByElement.setAscDescPresent(true); }  ]
    [<K_NULLS> ( 
        <K_FIRST> { orderByElement.setNullOrdering(OrderByElement.NullOrdering.NULLS_FIRST);  }  | 
        <K_LAST> { orderByElement.setNullOrdering(OrderByElement.NullOrdering.NULLS_LAST);  }  
        )?
    ]
    {
        orderByElement.setExpression(columnReference);
        return orderByElement;
    }
}

JdbcParameter SimpleJdbcParameter() : {
    JdbcParameter retval;
}
{
    "?" { retval = new JdbcParameter(++jdbcParameterIndex, false); } 
		[ LOOKAHEAD(2) token = <S_LONG> { retval.setUseFixedIndex(true); retval.setIndex(Integer.valueOf(token.image)); } ]
    {
        return retval;
    }
}

JdbcNamedParameter SimpleJdbcNamedParameter() : {
    Token token;
}
{
    ":" token = <S_IDENTIFIER>
    {
        return new JdbcNamedParameter(token.image);
    }
}

Limit LimitWithOffset() #LimitWithOffset:
{
    Limit limit = new Limit();
    Token token = null;
    JdbcParameter jdbc = null;
}
{
    (
            LOOKAHEAD(5)
                // mysql-> LIMIT offset,row_count
                <K_LIMIT>
                     (
                         token=<S_LONG> { limit.setOffset(new LongValue(token.image)); }
                         |
                         jdbc = SimpleJdbcParameter() { limit.setOffset(jdbc); }
                         |
                         ":" { limit.setOffset(new JdbcNamedParameter()); } [ LOOKAHEAD(2) token = <S_IDENTIFIER> { ((JdbcNamedParameter)limit.getOffset()).setName(token.image); } ]

                     )
                     ","

                (
                token=<S_LONG> { limit.setRowCount(new LongValue(token.image)); }
                |
                 jdbc = SimpleJdbcParameter() { limit.setRowCount(jdbc); } 
                 |
                 ":" { limit.setRowCount(new JdbcNamedParameter()); } [ LOOKAHEAD(2) token = <S_IDENTIFIER> { ((JdbcNamedParameter)limit.getRowCount()).setName(token.image); } ]
                )
            |
            limit = PlainLimit()
        )
    {
        linkAST(limit,jjtThis);
        return limit;
    }
}

Limit PlainLimit() #PlainLimit:
{
    Limit limit = new Limit();
    Token token = null;
    JdbcParameter jdbc;
}
{
    // mysql-postgresql-> LIMIT (row_count | ALL | NULL)
    <K_LIMIT>
     (
         token=<S_LONG> { limit.setRowCount(new LongValue(token.image)); }
         |
         jdbc = SimpleJdbcParameter() { limit.setRowCount(jdbc); } 
         |
        ":" { limit.setRowCount(new JdbcNamedParameter()); } [ LOOKAHEAD(2) token = <S_IDENTIFIER> { ((JdbcNamedParameter)limit.getRowCount()).setName(token.image); } ]
         |
         <K_ALL> { limit.setLimitAll(true);}
         |
         <K_NULL> { limit.setLimitNull(true); }
     )
    {
        linkAST(limit,jjtThis);
        return limit;
    }
}

Offset Offset():
{
    Offset offset = new Offset();
    Token token = null;
    JdbcParameter jdbc;
    JdbcNamedParameter jdbcNamed;
}
{
    (
            // postgresql-> OFFSET offset
            // sqlserver-oracle-> OFFSET offset (ROW | ROWS)
             <K_OFFSET>
                 (token=<S_LONG> { offset.setOffset(Long.parseLong(token.image)); }
                 | jdbc = SimpleJdbcParameter() { offset.setOffsetJdbcParameter(jdbc); } 
                 | jdbcNamed = SimpleJdbcNamedParameter() { offset.setOffsetJdbcParameter(jdbcNamed); }) 
                 [(<K_ROWS> { offset.setOffsetParam("ROWS"); } | <K_ROW> { offset.setOffsetParam("ROW"); })]

        )
    {
        return offset;
    }
}

Fetch Fetch():
{
    Fetch fetch = new Fetch();
    Token token = null;
    JdbcParameter jdbc;
}
{
    (
            // sqlserver-oracle-> FETCH (FIRST | NEXT) row_count (ROW | ROWS) ONLY
             <K_FETCH>
                  (<K_FIRST> { fetch.setFetchParamFirst(true); } | <K_NEXT>)
                 (token=<S_LONG> { fetch.setRowCount(Long.parseLong(token.image)); }
                 | jdbc = SimpleJdbcParameter() { fetch.setFetchJdbcParameter(jdbc); } ) /* "?" { fetch.setFetchJdbcParameter(true); } ) */
                 (<K_ROWS> { fetch.setFetchParam("ROWS"); } | <K_ROW>) 
                 <K_ONLY>

        )
    {
        return fetch;
    }
}

// according to http://technet.microsoft.com/en-us/library/ms189463.aspx
Top Top():
{
    Top top = new Top();
    Token token = null;
    Expression expr = null;
    JdbcParameter jdbc = null;
}
{
    <K_TOP>
    (
         token=<S_LONG>                      { top.setExpression(new LongValue(token.image)); }
       |
         jdbc = SimpleJdbcParameter() { top.setExpression(jdbc); }
         /*"?"                                 { top.setExpression(new JdbcParameter(++jdbcParameterIndex, false)); } [ LOOKAHEAD(2) token = <S_LONG> { ((JdbcParameter)(top.getExpression())).setUseFixedIndex(true); ((JdbcParameter)(top.getExpression())).setIndex(Integer.valueOf(token.image)); } ]*/
       |
       ":"                                  { top.setExpression(new JdbcNamedParameter()); } [ LOOKAHEAD(2) token = <S_IDENTIFIER> { ((JdbcNamedParameter)top.getExpression()).setName(token.image); } ]
       |
       "("
            expr=AdditiveExpression()   { top.setExpression(expr); }
            { top.setParenthesis(true);}
       ")"
    ) [ LOOKAHEAD(2) <K_PERCENT>            { top.setPercentage(true); } ] 
    {
        return top;
    }
}

// according to http://www-01.ibm.com/support/knowledgecenter/SSGU8G_12.1.0/com.ibm.sqls.doc/ids_sqs_0156.htm
Skip Skip():
{
    Skip skip = new Skip();
    Token token = null;
    JdbcParameter jdbc;
}
{
    <K_SKIP>
    (
         token=<S_LONG>                      { skip.setRowCount(Long.parseLong(token.image)); }
                | token=<S_IDENTIFIER>              { skip.setVariable(token.image); }
                | jdbc = SimpleJdbcParameter() { skip.setJdbcParameter(jdbc); } 
                   /* "?" { skip.setJdbcParameter(new JdbcParameter(++jdbcParameterIndex, false)); } [ LOOKAHEAD(2) token = <S_LONG> { skip.getJdbcParameter().setUseFixedIndex(true); skip.getJdbcParameter().setIndex(Integer.valueOf(token.image)); } ] */
    )
    {
        return skip;
    }
}

JAVACODE
OracleHint getOracleHint() {
  OracleHint hint = null;
  Token tok = getToken(1);
  // Retrieve first comment (if any) prior next token
  if (tok.specialToken != null) {
    tok = tok.specialToken;
    while (tok.specialToken != null) tok = tok.specialToken;
    // Check if it matches Hint pattern?
    if (OracleHint.isHintMatch(tok.image)) {
      hint = new OracleHint();
      hint.setComment(tok.image);
    }
  }
  return hint;
}

First First():
{
    First first = new First();
    Token token = null;
    JdbcParameter jdbc;
}
{
    ( <K_FIRST>                                 { first.setKeyword(First.Keyword.FIRST); }
            |  <K_LIMIT>                            { first.setKeyword(First.Keyword.LIMIT); }
        )
    (
         token=<S_LONG>                      { first.setRowCount(Long.parseLong(token.image)); }
                | token=<S_IDENTIFIER>              { first.setVariable(token.image); }
                | jdbc = SimpleJdbcParameter() { first.setJdbcParameter(jdbc); } 
                    /* "?" { first.setJdbcParameter(new JdbcParameter(++jdbcParameterIndex, false)); } [ LOOKAHEAD(2) token = <S_LONG> { first.getJdbcParameter().setUseFixedIndex(true); first.getJdbcParameter().setIndex(Integer.valueOf(token.image)); } ] */
    )
    {
        return first;
    }
}


Expression Expression() #Expression :
{
    Expression retval = null;
}
{
    retval=OrExpression()

    { return retval; }
}

Expression OrExpression():
{
    Expression left, right, result;
}
{
    left=AndExpression() { result = left; }
    (
        LOOKAHEAD(<K_OR>)
            <K_OR>
            right=AndExpression()
            {
                result = new OrExpression(left, right);
                left = result;
               }
     )*
     {
         return result;
     }

}

Expression AndExpression() :
{
    Expression left, right, result;
    boolean not = false;
}
{
    (
    LOOKAHEAD(Condition())
        left=Condition()
        |
        [ <K_NOT> { not = true; } ]
        "(" left=OrExpression() ")" {left = new Parenthesis(left); if (not) { ((Parenthesis)left).setNot(); not = false; } }
    )
    { result = left; }

    (
         (<K_AND> | <K_AND_OPERATOR>)
        (
        LOOKAHEAD(Condition())
            right=Condition()
            |
            [ <K_NOT> { not = true; } ]
            "(" right=OrExpression() ")" {right = new Parenthesis(right); if (not) { ((Parenthesis)right).setNot(); not = false; } }
        )
        {
            result = new AndExpression(left, right);
            left = result;
        }
    )*
    {
        return result;
    }
}

Expression Condition():
{
    Expression result;
    Token token;
}
{
    (LOOKAHEAD(SQLCondition()) result=SQLCondition()
    | LOOKAHEAD(RegularCondition()) result=RegularCondition()
    | LOOKAHEAD(Function()) result=Function()
    | <K_NOT> result=Column() { result = new NotExpression(result); }
    | result=Column()
    | LOOKAHEAD({ "0".equals(getToken(1).image) || "1".equals(getToken(1).image) }) token=<S_LONG> { result = new LongValue(token.image); }
    )

    { return result; }
}

Expression RegularCondition() #RegularCondition:
{
    Expression result = null;
    Expression leftExpression;
    Expression rightExpression;
    boolean not = false;
    int oracleJoin=EqualsTo.NO_ORACLE_JOIN;
    int oraclePrior=EqualsTo.NO_ORACLE_PRIOR;
    boolean binary = false;
}
{
    [ LOOKAHEAD(2) <K_PRIOR> { oraclePrior = EqualsTo.ORACLE_PRIOR_START; }]
    [ <K_NOT> { not = true; } ]
    leftExpression=ComparisonItem() { result = leftExpression; }

    [ "(" "+" ")" { oracleJoin=EqualsTo.ORACLE_JOIN_RIGHT; } ]

    ( LOOKAHEAD(2)
    ">" { result = new GreaterThan(); }
    | "<" { result = new MinorThan(); }
    | "=" { result = new EqualsTo(); }
    | token=<OP_GREATERTHANEQUALS> { result = new GreaterThanEquals(token.image); }
    | token=<OP_MINORTHANEQUALS> { result = new MinorThanEquals(token.image); }
    | token=<OP_NOTEQUALSSTANDARD> { result = new NotEqualsTo(token.image); }
    | token=<OP_NOTEQUALSBANG> { result = new NotEqualsTo(token.image); }
    | "@@" { result = new Matches(); }
    | "~" { result = new RegExpMatchOperator(RegExpMatchOperatorType.MATCH_CASESENSITIVE); }
    | <K_REGEXP> [ <K_BINARY> { binary=true; } ] { result = new RegExpMySQLOperator(binary?RegExpMatchOperatorType.MATCH_CASESENSITIVE:RegExpMatchOperatorType.MATCH_CASEINSENSITIVE); }
    | <K_RLIKE> [ <K_BINARY> { binary=true; } ] { result = new RegExpMySQLOperator(binary?RegExpMatchOperatorType.MATCH_CASESENSITIVE:RegExpMatchOperatorType.MATCH_CASEINSENSITIVE).useRLike(); }
    | "~*" { result = new RegExpMatchOperator(RegExpMatchOperatorType.MATCH_CASEINSENSITIVE); }
    | "!~" { result = new RegExpMatchOperator(RegExpMatchOperatorType.NOT_MATCH_CASESENSITIVE); }
    | "!~*" { result = new RegExpMatchOperator(RegExpMatchOperatorType.NOT_MATCH_CASEINSENSITIVE); }

        | "@>" { result = new JsonOperator("@>"); }
        | "<@" { result = new JsonOperator("<@"); }
        | "?" { result = new JsonOperator("?"); }
        | "?|" { result = new JsonOperator("?|"); }
        | "?&" { result = new JsonOperator("?&"); }
        | <OP_CONCAT> { result = new JsonOperator("||"); }
        | "-" { result = new JsonOperator("-"); }
        | "-#" { result = new JsonOperator("-#"); }
    )

    ( LOOKAHEAD(2) <K_PRIOR> rightExpression=ComparisonItem() { oraclePrior = EqualsTo.ORACLE_PRIOR_END; } 
      | rightExpression=ComparisonItem() )

    [ "(" "+" ")" { oracleJoin=EqualsTo.ORACLE_JOIN_LEFT; } ]

    {
        BinaryExpression regCond = (BinaryExpression) result;
        regCond.setLeftExpression(leftExpression);
        regCond.setRightExpression(rightExpression);
        if (not)
            regCond.setNot();

        if (oracleJoin>0)
            ((SupportsOldOracleJoinSyntax)result).setOldOracleJoinSyntax(oracleJoin);

        if (oraclePrior!=EqualsTo.NO_ORACLE_PRIOR)
            ((SupportsOldOracleJoinSyntax)result).setOraclePriorPosition(oraclePrior);
    }

    {
        linkAST(result,jjtThis);
        return result;
    }
}

Expression SQLCondition():
{
    Expression result;
}
{
    (
    LOOKAHEAD(InExpression()) result=InExpression()
    | LOOKAHEAD(Between()) result=Between()
    | LOOKAHEAD(IsNullExpression()) result=IsNullExpression()
    | LOOKAHEAD(ExistsExpression()) result=ExistsExpression()
    |  result=LikeExpression()
    )
    { return result; }
}

Expression InExpression() :
{
    InExpression result = new InExpression();
    ItemsList leftItemsList = null;
    ItemsList rightItemsList = null;
    Expression leftExpression = null;
}
{
    ( LOOKAHEAD(3) "(" (
            LOOKAHEAD(SimpleExpressionList()) leftItemsList = SimpleExpressionList() { result.setLeftItemsList(leftItemsList); }
            |
            leftExpression=SimpleExpression()
            [ "(" "+" ")" { result.setOldOracleJoinSyntax(EqualsTo.ORACLE_JOIN_RIGHT); } ]
          )
      ")"
    |
        leftExpression=SimpleExpression() { result.setLeftExpression(leftExpression); }
        [ "(" "+" ")" { result.setOldOracleJoinSyntax(EqualsTo.ORACLE_JOIN_RIGHT); } ]
    )
    [<K_NOT> { result.setNot(true); } ] <K_IN> "(" (LOOKAHEAD(3) rightItemsList=SubSelect() | rightItemsList=SimpleExpressionList() ) ")"
    {
        result.setRightItemsList(rightItemsList);
        return result;
    }
}

Expression Between() :
{
    Between result = new Between();
    Expression leftExpression = null;
    Expression betweenExpressionStart = null;
    Expression betweenExpressionEnd = null;
}
{
    leftExpression=SimpleExpression()
        [<K_NOT> { result.setNot(true); }]
        <K_BETWEEN> betweenExpressionStart=SimpleExpression() <K_AND> betweenExpressionEnd=SimpleExpression()

    {
        result.setLeftExpression(leftExpression);
        result.setBetweenExpressionStart(betweenExpressionStart);
        result.setBetweenExpressionEnd(betweenExpressionEnd);
        return result;
    }
}

Expression LikeExpression() #LikeExpression:
{
    LikeExpression result = new LikeExpression();
    Expression leftExpression = null;
    Expression rightExpression = null;
}
{
    (
        LOOKAHEAD(3) (
            leftExpression=SimpleExpression()
            [<K_NOT> { result.setNot(true); } ] ( <K_LIKE> | <K_ILIKE> { result.setCaseInsensitive(true); } ) rightExpression=SimpleExpression()
            [<K_ESCAPE> token=<S_CHAR_LITERAL> { result.setEscape((new StringValue(token.image)).getValue()); }]
        )
        |
        (
            [<K_NOT> { result.setNot(true); } ] leftExpression=SimpleExpression() ( <K_LIKE> | <K_ILIKE> { result.setCaseInsensitive(true); } ) rightExpression=SimpleExpression()
            [<K_ESCAPE> token=<S_CHAR_LITERAL> { result.setEscape((new StringValue(token.image)).getValue()); }]
        )
    )
    {
        result.setLeftExpression(leftExpression);
        result.setRightExpression(rightExpression);
        linkAST(result,jjtThis);
        return result;
    }
}

Expression IsNullExpression():
{
    IsNullExpression result = new IsNullExpression();
    Expression leftExpression = null;
}
{
    (
    <K_NOT> { result.setNot(true); } leftExpression=SimpleExpression() 
        ( <K_ISNULL> { result.setUseIsNull(true); } | <K_IS> <K_NULL> )
    |
    leftExpression=SimpleExpression() 
        (<K_ISNULL> { result.setUseIsNull(true); } | <K_IS> [<K_NOT> { result.setNot(true); } ] <K_NULL> )
    )

    {
        result.setLeftExpression(leftExpression);
        return result;
    }
}

Expression ExistsExpression():
{
    ExistsExpression result = new ExistsExpression();
    Expression rightExpression = null;
}
{
    [<K_NOT> { result.setNot(true); } ] <K_EXISTS> rightExpression=SimpleExpression()
    {
        result.setRightExpression(rightExpression);
        return result;
    }
}

ExpressionList SQLExpressionList():
{
    ExpressionList retval = new ExpressionList();
    List<Expression> expressions = new ArrayList<Expression>();
    Expression expr = null;
}
{
    expr=Expression() { expressions.add(expr); } ("," expr=Expression() { expressions.add(expr); })*
    {
        retval.setExpressions(expressions);
        return retval;
    }
}

ExpressionList SimpleExpressionList():
{
    ExpressionList retval = new ExpressionList();
    List<Expression> expressions = new ArrayList<Expression>();
    Expression expr = null;
}
{
    expr=SimpleExpression() { expressions.add(expr); } ("," expr=SimpleExpression() { expressions.add(expr); })*
    {
        retval.setExpressions(expressions);
        return retval;
    }
}

ExpressionList SimpleExpressionListAtLeastTwoItems():
{
    ExpressionList retval = new ExpressionList();
    List<Expression> expressions = new ArrayList<Expression>();
    Expression expr = null;
}
{
    expr=SimpleExpression() { expressions.add(expr); } ("," expr=SimpleExpression() { expressions.add(expr); })+
    {
        retval.setExpressions(expressions);
        return retval;
    }
}

Expression ComparisonItem() :
{
    Expression retval = null;
}
{
  (
    retval=AllComparisonExpression()
    | LOOKAHEAD(3) retval=AnyComparisonExpression()
    | LOOKAHEAD(ValueListExpression()) retval=ValueListExpression()
    | LOOKAHEAD(3) retval=SimpleExpression()
    | retval=RowConstructor()
  )

   {
      return retval;
   }
}

Expression AllComparisonExpression() :
{
    AllComparisonExpression retval = null;
    SubSelect subselect = null;
}
{
 <K_ALL> "(" subselect=SubSelect() ")" { retval = new AllComparisonExpression(subselect); }
   {
      return retval;
   }
}

Expression AnyComparisonExpression() :
{
    AnyComparisonExpression retval = null;
    AnyType anyType;
    SubSelect subselect = null;
}
{
 (<K_ANY> { anyType = AnyType.ANY; } | <K_SOME> { anyType = AnyType.SOME; } ) 
 "(" subselect=SubSelect() ")" { retval = new AnyComparisonExpression(anyType, subselect); }
   {
      return retval;
   }
}

Expression SimpleExpression():
{
    Expression retval = null;
}
{
  (
        retval=ConcatExpression()
  )

   {
      return retval;
   }
}

Expression ConcatExpression():
{
    Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
}
{
    leftExpression=BitwiseAndOr()  { result = leftExpression; }
    (LOOKAHEAD(3)
        <OP_CONCAT>  /* Oracle allows space between the bars. */
        rightExpression=BitwiseAndOr()
        {
            Concat binExp = new Concat();
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            result = binExp;
            leftExpression = result;
        }
    )*

    { return result; }
}

Expression BitwiseAndOr():
{
    Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
}
{
    leftExpression=AdditiveExpression()  { result = leftExpression; }
    (
        (
            "|" { result = new BitwiseOr(); }
            |
            "&" { result = new BitwiseAnd(); }
			|
			"<<" { result = new BitwiseLeftShift(); }
			|
			">>" { result = new BitwiseRightShift(); }
        )

        rightExpression=AdditiveExpression()

        {
            BinaryExpression binExp = (BinaryExpression) result;
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            leftExpression = result;
        }
    )*

    { return result; }
}

Expression AdditiveExpression():
{
    Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
}
{
    leftExpression=MultiplicativeExpression()  { result = leftExpression; }
    ( LOOKAHEAD(2)
        ("+" { result = new Addition(); }
                                    | "-" { result = new Subtraction(); } )

        rightExpression=MultiplicativeExpression()
        {
            BinaryExpression binExp = (BinaryExpression) result;
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            leftExpression = result;
        }
    )*

    { return result; }
}

Expression MultiplicativeExpression():
{
    Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
}
{
    (
      leftExpression=BitwiseXor()
    )
      { result = leftExpression; }
    (
        LOOKAHEAD(2) ("*" { result = new Multiplication(); }
                                    | "/" { result = new Division(); }
                                    | "%" { result = new Modulo(); }
                    )

        rightExpression=BitwiseXor()

        {
            BinaryExpression binExp = (BinaryExpression) result;
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            leftExpression = result;
        }
    )*
    { return result; }
}

Expression BitwiseXor():
{
    Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
}
{
    leftExpression=PrimaryExpression()  { result = leftExpression; }
    (
        "^"
        rightExpression=PrimaryExpression()
        {
            BitwiseXor binExp = new BitwiseXor();
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            result = binExp;
            leftExpression = result;
        }
    )*

    { return result; }
}

Expression PrimaryExpression() #PrimaryExpression:
{
    Expression retval = null;
    CastExpression castExpr = null;
    Token token = null;
    Token sign = null;
    String tmp = "";
    ColDataType type = null;
}
{
[sign="+" | sign="-" | sign="~"]
(
    <K_NULL> { retval = new NullValue(); }

    | retval=CaseWhenExpression()

    | retval = SimpleJdbcParameter()

    | LOOKAHEAD(2) retval=JdbcNamedParameter()

    | retval=UserVariable()

    | LOOKAHEAD(2) retval=NumericBind()

    | LOOKAHEAD(AnalyticExpression()) retval=AnalyticExpression()

    | LOOKAHEAD(3) retval=ExtractExpression()

    | retval=MySQLGroupConcat()

    | LOOKAHEAD(JsonExpression()) retval=JsonExpression()

    | LOOKAHEAD(Function()) retval=Function()

    | token=<S_DOUBLE>  { retval = new DoubleValue(token.image); }

    | token=<S_LONG> { retval = new LongValue(token.image); }

    | token=<S_HEX>  { retval = new HexValue(token.image); }

    | LOOKAHEAD(2) retval=CastExpression()

    // support timestamp expressions
    | token=<K_TIME_KEY_EXPR> { retval = new TimeKeyExpression(token.image); }

    | LOOKAHEAD(2) retval=DateTimeLiteralExpression()

    | retval=Column()

    | LOOKAHEAD("(" SimpleExpression() ")") "(" retval=SimpleExpression() ")" {retval = new Parenthesis(retval); }

    | LOOKAHEAD(3) "(" retval=SubSelect() ")"

    | token=<S_CHAR_LITERAL> { retval = new StringValue(token.image); linkAST(retval,jjtThis); }

    | "{d" token=<S_CHAR_LITERAL> "}"  { retval = new DateValue(token.image); }

    | "{t" token=<S_CHAR_LITERAL> "}"  { retval = new TimeValue(token.image); }

    | "{ts" token=<S_CHAR_LITERAL> "}" { retval = new TimestampValue(token.image); }

    | retval = IntervalExpression()
)

    ( "::" type=ColDataType() {
        castExpr = new CastExpression();
        castExpr.setUseCastKeyword(false);
        castExpr.setLeftExpression(retval);
        castExpr.setType(type);
        retval=castExpr;
    } )*

    {
        if (sign != null) {
            retval = new SignedExpression(sign.image.charAt(0), retval);
        }
        return retval;
    }
}

JdbcNamedParameter JdbcNamedParameter() : {
    JdbcNamedParameter parameter = new JdbcNamedParameter();
    String name;
}
{
    ":" (name=RelObjectNameExt2() { parameter.setName(name); }) 
    {
        return parameter;
    }
}

UserVariable UserVariable() : {
    UserVariable var = new UserVariable();
    String varName;
    String var2;
}
{
    ("@" | "@@" { var.setDoubleAdd(true);} )
    varName=RelObjectNameExt2() 
    ( "." var2=RelObjectNameExt2() { varName+="." + var2; } )*
    { 
        var.setName(varName); 
        return var; 
    }
}

NumericBind NumericBind() : {
    NumericBind var = new NumericBind();
    Token token;
}
{
    ":" token=<S_LONG> 
    { 
        var.setBindId(Integer.valueOf(token.image)); 
        return var; 
    }
}

DateTimeLiteralExpression DateTimeLiteralExpression() : {
    DateTimeLiteralExpression expr = new DateTimeLiteralExpression();
    Token t;
} {
    t=<K_DATETIMELITERAL>  { expr.setType(DateTimeLiteralExpression.DateTime.valueOf(t.image.toUpperCase())); }
    
    t=<S_CHAR_LITERAL> { expr.setValue(t.image); return expr; }
}

JsonExpression JsonExpression() : {
  JsonExpression result = new JsonExpression();
  Column column;
  Token token;
}
{
    column=Column() (
        "->" token=<S_CHAR_LITERAL> {result.addIdent(token.image,"->");} | 
        "->>" token=<S_CHAR_LITERAL> {result.addIdent(token.image,"->>");} |
        "#>" token=<S_CHAR_LITERAL> {result.addIdent(token.image,"#>");} |
        "#>>" token=<S_CHAR_LITERAL> {result.addIdent(token.image,"#>>");}
    )+
    { 
        result.setColumn(column);
        return result; 
    }
}

IntervalExpression IntervalExpression() : {
    IntervalExpression interval = new IntervalExpression();
    Token token;
    boolean signed = false;
}
{
    <K_INTERVAL> ["-" {signed=true;}] (token=<S_LONG> | token=<S_DOUBLE> | token=<S_CHAR_LITERAL>) 
    { interval.setParameter((signed?"-":"") + token.image); }
    [ LOOKAHEAD(2) token = <S_IDENTIFIER> { interval.setIntervalType(token.image); } ]
    {
        return interval;
    }
}

KeepExpression KeepExpression() : {
    KeepExpression keep = new KeepExpression();
    Token token;
    List<OrderByElement> list;
}
{
    <K_KEEP> "(" token = <S_IDENTIFIER> (<K_FIRST> { keep.setFirst(true); } | <K_LAST> { keep.setFirst(false); })
      list = OrderByElements() ")"

    {
        keep.setName(token.image);
        keep.setOrderByElements(list);
        return keep;
    }
}

AnalyticExpression AnalyticExpression() :
{
    AnalyticExpression retval = new AnalyticExpression();
    ExpressionList expressionList = null;
    List<OrderByElement> olist = null;
    Token token = null;
    Expression expr = null;
    Expression offset = null;
    Expression defaultValue = null;
    WindowElement windowElement = null;
    KeepExpression keep = null;
    boolean distinct = false;
}
{
    token=<S_IDENTIFIER> { retval.setName(token.image); }
        "(" [ 
            [ <K_DISTINCT> {distinct = true;} ]
            (expr=SimpleExpression() ["," offset=SimpleExpression() ["," defaultValue=SimpleExpression() ]] | "*" { retval.setAllColumns(true); } )
            ] ")" 

    [ keep=KeepExpression() ]

    (<K_OVER> {retval.setType(AnalyticType.OVER);} 
        | <K_WITHIN> <K_GROUP> {retval.setType(AnalyticType.WITHIN_GROUP);} )

    "("
        [<K_PARTITION> <K_BY> expressionList=SimpleExpressionList() ]
        [olist=OrderByElements() [windowElement = WindowElement() ] ]
        
    {
        retval.setDistinct(distinct);
        retval.setExpression(expr);
        retval.setOffset(offset);
        retval.setDefaultValue(defaultValue);
        retval.setKeep(keep);
        retval.setPartitionExpressionList(expressionList);
        retval.setOrderByElements(olist);
        retval.setWindowElement(windowElement);
    }
    ")"
    {
        return retval;
    }
}

WindowElement WindowElement():
{
    WindowElement windowElement = new WindowElement();
    WindowRange range = new WindowRange();
    WindowOffset offset = null;
}
{
    (<K_ROWS> { windowElement.setType(WindowElement.Type.ROWS); }  |  <K_RANGE> { windowElement.setType(WindowElement.Type.RANGE); } )
    ( (
      <K_BETWEEN> { windowElement.setRange(range); } 
      offset = WindowOffset() { range.setStart(offset); } 
      <K_AND> offset = WindowOffset() { range.setEnd(offset); }
      )
    | 
      offset = WindowOffset() { windowElement.setOffset(offset); } 
    )
 
    {
        return windowElement;
    }
}

WindowOffset WindowOffset():
{
    WindowOffset offset = new WindowOffset();
    Expression expr = null;
}
{
    (
		(
			<K_UNBOUNDED> (<K_PRECEDING> { offset.setType(WindowOffset.Type.PRECEDING); } |
											<K_FOLLOWING> { offset.setType(WindowOffset.Type.FOLLOWING); } )
		) 
		|
		( <K_CURRENT> <K_ROW> { offset.setType(WindowOffset.Type.CURRENT); } ) 
		|
		( expr = SimpleExpression() {
			offset.setType(WindowOffset.Type.EXPR); 
			offset.setExpression(expr); 
			} 
			(<K_PRECEDING> { offset.setType(WindowOffset.Type.PRECEDING); } | <K_FOLLOWING> { offset.setType(WindowOffset.Type.FOLLOWING);  } )
		)
	)
  
    {
        return offset;
    }
} 

ExtractExpression ExtractExpression() :
{
    ExtractExpression retval = new ExtractExpression();
    Token token = null;
    Expression expr = null;
}
{
    <K_EXTRACT>
    "("
        token=<S_IDENTIFIER> { retval.setName(token.image); }
        <K_FROM>
        expr=SimpleExpression() { retval.setExpression(expr); }
    ")"
    {
        return retval;
    }
}

CastExpression CastExpression():
{
    CastExpression retval = new CastExpression();
    ColDataType type = null;
    Expression expression = null;
    boolean    useCastKeyword;
}
{
    <K_CAST> "(" expression=SimpleExpression() <K_AS> type=ColDataType() ")" { retval.setUseCastKeyword(true); }

    {
        retval.setLeftExpression(expression);
        retval.setType(type);
        return retval;
    }
}

Expression CaseWhenExpression() #CaseWhenExpression:
{
    CaseExpression caseExp = new CaseExpression();
    Expression switchExp = null;
    WhenClause clause;
    List<WhenClause> whenClauses = new ArrayList<WhenClause>();
    Expression elseExp = null;
}
{
    <K_CASE>
    (
            ( clause=WhenThenSearchCondition() { whenClauses.add(clause); } )+
        |
            (LOOKAHEAD(RegularCondition()) switchExp=RegularCondition() | switchExp=BitwiseAndOr())
             ( clause=WhenThenValue() { whenClauses.add(clause); } )+
    )
   [<K_ELSE> elseExp=SimpleExpression()]
    <K_END>
    {
        caseExp.setSwitchExpression(switchExp);
        caseExp.setWhenClauses(whenClauses);
        caseExp.setElseExpression(elseExp);
        return caseExp;
    }
}

WhenClause WhenThenSearchCondition():
{
    WhenClause whenThen = new WhenClause();
    Expression whenExp = null;
    Expression thenExp = null;
}
{
    <K_WHEN> (LOOKAHEAD(Expression()) whenExp=Expression() | whenExp=SimpleExpression()) <K_THEN> thenExp=SimpleExpression()
    {
       whenThen.setWhenExpression(whenExp);
       whenThen.setThenExpression(thenExp);
       return whenThen;
    }
}

WhenClause WhenThenValue():
{
    WhenClause whenThen = new WhenClause();
    Expression whenExp = null;
    Expression thenExp = null;
}
{
    <K_WHEN> whenExp=SimpleExpression() <K_THEN> thenExp=SimpleExpression()
    {
       whenThen.setWhenExpression(whenExp);
       whenThen.setThenExpression(thenExp);
       return whenThen;
    }
}

RowConstructor RowConstructor(): {
    ExpressionList list = null;
    RowConstructor rowConstructor = new RowConstructor();
} {
    [ <K_ROW> { rowConstructor.setName("ROW");} ]
    "("
        list = SimpleExpressionList()
    ")"

    {
        rowConstructor.setExprList(list);
        return rowConstructor;
    }
}

Execute Execute(): {
    String funcName = null;
    ExpressionList expressionList = null;
    Execute execute = new Execute();
}
{
    (<K_EXEC> { execute.setExecType(Execute.EXEC_TYPE.EXEC); } 
        | <K_EXECUTE> { execute.setExecType(Execute.EXEC_TYPE.EXECUTE); } 
        | <K_CALL> { execute.setExecType(Execute.EXEC_TYPE.CALL); } )

    funcName=RelObjectName() { execute.setName(funcName); }

    [ expressionList=SimpleExpressionList() ]

    { 
        execute.setExprList(expressionList);
        return execute; 
    }
}

Function Function() #Function:
{
    Function retval = new Function();
    String funcName = null;
    String tmp = null;
    ExpressionList expressionList = null;
    KeepExpression keep = null;
    SubSelect expr = null;
}
{
    ["{fn" { retval.setEscaped(true); } ]

    funcName=RelObjectNameExt()

    [ "." tmp=RelObjectNameExt() { funcName+= "." + tmp; } ["." tmp=RelObjectNameExt() { funcName+= "." + tmp; }]]
    "(" [ [<K_DISTINCT> { retval.setDistinct(true); } | <K_ALL> { retval.setAllColumns(true); }] (LOOKAHEAD(3) expressionList=SimpleExpressionList() | "*" { retval.setAllColumns(true); }
        | expr = SubSelect() { expr.setUseBrackets(false); expressionList = new ExpressionList(expr); } ) ] ")"

    [ "." tmp=RelObjectName() { retval.setAttribute(tmp); }]

    [ keep = KeepExpression() ]

    ["}"]
    {
        retval.setParameters(expressionList);
        retval.setName(funcName);
        retval.setKeep(keep);
        linkAST(retval,jjtThis);
        return retval;
    }
} 

MySQLGroupConcat MySQLGroupConcat():{
    MySQLGroupConcat retval = new MySQLGroupConcat();
    ExpressionList expressionList = null;
    List<OrderByElement> orderByList = null;
    Token t;
}
{
    <K_GROUP_CONCAT> "(" 
       [<K_DISTINCT>  { retval.setDistinct(true); } ] 
       expressionList = SimpleExpressionList() 
       [ orderByList = OrderByElements() { retval.setOrderByElements(orderByList); } ]
       [ <K_SEPARATOR> t=<S_CHAR_LITERAL> { retval.setSeparator(t.image); } ]
    ")"
    { 
        retval.setExpressionList(expressionList);
        return retval; 
    }
}

ValueListExpression ValueListExpression():
{
    ValueListExpression retval = new ValueListExpression();
    ExpressionList expressionList = null;
}
{
    "(" expressionList = SimpleExpressionListAtLeastTwoItems() ")"
    {
        retval.setExpressionList(expressionList);
        return retval;
    }
}

TableFunction TableFunction():
{
    Alias alias = null;
    Function function;
    TableFunction functionItem;
}
{
    function=Function() { functionItem = new TableFunction(); functionItem.setFunction(function); }
             [LOOKAHEAD(2) alias=Alias() { functionItem.setAlias(alias); }]
    { return functionItem; }
}

SubSelect SubSelect() #SubSelect:
{
    SelectBody selectBody = null;
    SubSelect subSelect = new SubSelect();
    List<WithItem> with = null;
}
{
    [ with=WithList() { subSelect.setWithItemsList(with); } ]
    selectBody=SelectBody()
    {
        subSelect.setSelectBody(selectBody);
        return subSelect;
    }
}

CreateIndex CreateIndex():
{
    CreateIndex createIndex = new CreateIndex();
    Table table = null;
    List<String> colNames = new ArrayList<String>();
    Token columnName;
    Index index = null;
    String name = null;
    List<String> parameter = new ArrayList<String>();
    List<String> types = new ArrayList<String>();
    List<String> indexSpecs = new ArrayList<String>();
    Token ascDesc = null;
}
{
    <K_CREATE>
    (parameter = CreateParameter() { types.addAll(parameter); })*

    <K_INDEX> name=RelObjectName()
    {
        index = new Index();
        index.setName(name);
        index.setTypes(types);
    }

    <K_ON> table=Table()

    "("
    (columnName=<S_IDENTIFIER>
    |
    columnName=<S_QUOTED_IDENTIFIER>)

    (CreateParameter() | ascDesc=<K_ASC> | ascDesc=<K_DESC>)*
    {
        colNames.add(columnName.image);
        indexSpecs.add(ascDesc == null ? null : ascDesc.image);
    }

    (
        ","
        (columnName=<S_IDENTIFIER>
        |
        columnName=<S_QUOTED_IDENTIFIER>)

        (CreateParameter() | ascDesc=<K_ASC> | ascDesc=<K_DESC>)*
        {
            colNames.add(columnName.image);
        indexSpecs.add(ascDesc == null ? null : ascDesc.image);
        }
    )*

    ")"
    (CreateParameter() {})*

    {
        index.setColumnsNames(colNames);
        index.setIndexSpec(indexSpecs);
        createIndex.setIndex(index);
        createIndex.setTable(table);
        return createIndex;
    }
}

CreateTable CreateTable():
{
    CreateTable createTable = new CreateTable();
    Table table = null;
    List columnDefinitions = new ArrayList();
    List columnSpecs = null;
    List<String> tableOptions = new ArrayList<String>();
    List<String> createOptions = new ArrayList<String>();
    String columnName;
    Token tk = null;
    Token tk2 = null;
    Token tk3 = null;
    String sk3 = null;
    ColDataType colDataType = null;
    String stringList = null;
    ColumnDefinition coldef = null;
    List indexes = new ArrayList();
    List colNames = null;
    Index index = null;
    ForeignKeyIndex fkIndex = null;
    List<String> parameter = new ArrayList<String>();
    List<String> idxSpec = new ArrayList<String>();
    Table fkTable = null;
    Select select = null;
    CheckConstraint checkCs = null;
    ExcludeConstraint excludeC = null;
}
{
    <K_CREATE>
    [ <K_UNLOGGED> { createTable.setUnlogged(true); } ]

    /* [ [ (tk=<K_GLOBAL> | tk=<K_LOCAL>) {createOptions.add(tk.image);} ] 
       ( tk=<K_TEMPORARY> | tk=<K_TEMP> ) {createOptions.add(tk.image);}] */

    (parameter = CreateParameter() { createOptions.addAll(parameter); })*

    <K_TABLE> 
    [ <K_IF> <K_NOT> <K_EXISTS> { createTable.setIfNotExists(true); }]
    table=Table()
    [
        ("("
        columnName=RelObjectName()

        colDataType = ColDataType()
        {
            columnSpecs = new ArrayList();
        }

        ( parameter=CreateParameter() { columnSpecs.addAll(parameter); } )*

        {
            coldef = new ColumnDefinition();
            coldef.setColumnName(columnName);
            coldef.setColDataType(colDataType);
            if (columnSpecs.size() > 0)
                coldef.setColumnSpecStrings(columnSpecs);
            columnDefinitions.add(coldef);
        }

        (
            ","

            (
                LOOKAHEAD(3) (
                    tk=<K_INDEX>
                        sk3=RelObjectName()
                        colNames=ColumnsNamesList()
                        {
                            index = new Index();
                            index.setType(tk.image);
                            index.setName(sk3);
                            index.setColumnsNames(colNames);
                            indexes.add(index);
                        }
                )
                |
                LOOKAHEAD(3) (
                    {
                        index = new NamedConstraint();
                    }
                    [<K_CONSTRAINT> sk3=RelObjectName() {index.setName(sk3);} ]
                    
                    (tk=<K_PRIMARY> tk2=<K_KEY> {index.setType(tk.image + " " + tk2.image);}
                     | tk=<K_UNIQUE> [ tk2=<K_KEY> ] {index.setType(tk.image + (tk2!=null?" " + tk2.image:""));}
                     )
                        colNames=ColumnsNamesList()
                        ( parameter=CreateParameter() { idxSpec.addAll(parameter); } )*
                        {
                            index.setColumnsNames(colNames);
                            index.setIndexSpec(idxSpec);
                            indexes.add(index);
                        }
                )
                |
                LOOKAHEAD(3) ( {tk=null;}
                     [ tk=<K_UNIQUE> ] [ tk3=<K_FULLTEXT> ] tk2=<K_KEY>
                        sk3=RelObjectName()
                        colNames=ColumnsNamesList()
                        {
                            index = new Index();
                            index.setType((tk!=null?tk.image + " ":"") + (tk3!=null?tk3.image + " ":"") + tk2.image);
                            index.setName(sk3);
                            index.setColumnsNames(colNames);
                            indexes.add(index);
                        }
                )
                |
                LOOKAHEAD(3)(
                    {
                        fkIndex = new ForeignKeyIndex();
                    }
                    [<K_CONSTRAINT> sk3=RelObjectName() {fkIndex.setName(sk3);} ]
                    tk=<K_FOREIGN> tk2=<K_KEY>
                        colNames=ColumnsNamesList()
                        {
                            fkIndex.setType(tk.image + " " + tk2.image);
                            fkIndex.setColumnsNames(colNames);
                        }
                        <K_REFERENCES> fkTable=Table() colNames=ColumnsNamesList()
                        {
                            fkIndex.setTable(fkTable);
                            fkIndex.setReferencedColumnNames(colNames);
                            indexes.add(fkIndex);
                        }
                        [LOOKAHEAD(2) (<K_ON> <K_DELETE> 
                                  (<K_CASCADE> {fkIndex.setOnDeleteReferenceOption("CASCADE");}
                                   |
                                   <K_NO> <K_ACTION> {fkIndex.setOnDeleteReferenceOption("NO ACTION");}
                                   |
                                   <K_SET> <K_NULL> {fkIndex.setOnDeleteReferenceOption("SET NULL");}
                                    ))]
                        [LOOKAHEAD(2) (<K_ON> <K_UPDATE> (<K_CASCADE> {fkIndex.setOnUpdateReferenceOption("CASCADE");}|<K_NO> <K_ACTION> {fkIndex.setOnUpdateReferenceOption("NO ACTION");}))]
                )
                |
                 LOOKAHEAD(3)(
                    [<K_CONSTRAINT>  sk3 = RelObjectName()]
                    {Expression exp = null;}
                    <K_CHECK>  ("(" exp = Expression() ")")* {
                       checkCs = new CheckConstraint();
                       checkCs.setName(sk3);
                       checkCs.setExpression(exp);
                       indexes.add(checkCs);
                       }
                )
                |
                    tk=<K_EXCLUDE> {excludeC = new ExcludeConstraint(); Expression exp = null;}
                    (tk2=<K_WHERE>
                        ("(" exp = Expression() ")")* {excludeC.setExpression(exp);})
                    {
                        indexes.add(excludeC);
                    }
                |
                (
                    columnName=RelObjectName()

                    colDataType = ColDataType()
                    {
                        columnSpecs = new ArrayList();
                    }

                    (     parameter=CreateParameter() { columnSpecs.addAll(parameter); }     )*

                    {
                        coldef = new ColumnDefinition();
                        coldef.setColumnName(columnName);
                        coldef.setColDataType(colDataType);
                        if (columnSpecs.size() > 0)
                            coldef.setColumnSpecStrings(columnSpecs);
                        columnDefinitions.add(coldef);
                    }
                )
            )
        )*

        ")"
        (     parameter=CreateParameter() { tableOptions.addAll(parameter); } )*
        )
        |
        (
        <K_AS> ( LOOKAHEAD("(" Select() ")") "(" select = Select() { createTable.setSelect(select, true); } ")"
                 | select = Select() { createTable.setSelect(select, false); } )
        )
    ]

    {
        createTable.setTable(table);
        if (indexes.size() > 0)
            createTable.setIndexes(indexes);
        if (createOptions.size() > 0)
            createTable.setCreateOptionsStrings(createOptions);
        if (tableOptions.size() > 0)
            createTable.setTableOptionsStrings(tableOptions);
        if (columnDefinitions.size() > 0)
            createTable.setColumnDefinitions(columnDefinitions);
        return createTable;
    }
}

ColDataType ColDataType():
{
    ColDataType colDataType = new ColDataType();
    Token tk = null;
    Token tk2 = null;
    ArrayList argumentsStringList = new ArrayList();
    List<Integer> array = new ArrayList<Integer>();
}
{
    ( 
		(tk=<K_CHARACTER> | tk=<K_BIT>) [tk2=<K_VARYING>] { colDataType.setDataType(tk.image + (tk2!=null?" " + tk2.image:"")); }
		| tk=<K_DOUBLE> [LOOKAHEAD(2) tk2=<K_PRECISION>] { colDataType.setDataType(tk.image + (tk2!=null?" " + tk2.image:"")); }
		| ( tk=<S_IDENTIFIER> | tk=<K_DATETIMELITERAL> | tk=<K_XML> | tk=<K_INTERVAL> | tk=<DT_ZONE> | tk=<K_CHAR> )  
				{ colDataType.setDataType(tk.image); }
		| tk=<K_UNSIGNED> tk2=<S_IDENTIFIER> {colDataType.setDataType(tk.image + " " + tk2.image);}
	)

    [LOOKAHEAD(2) "(" {tk2 =null;} ( (tk=<S_LONG> [ tk2=<K_BYTE> | tk2=<K_CHAR> ] | tk=<S_CHAR_LITERAL> | tk=<S_IDENTIFIER> ) 
		{ argumentsStringList.add(tk.image + (tk2!=null?" " + tk2.image:"")); } ["," {/*argumentsStringList.add(",");*/}] )*    ")"]
    [( "[" {tk=null;} [ tk=<S_LONG> ] { array.add(tk!=null?Integer.valueOf(tk.image):null); } "]" )+ { colDataType.setArrayData(array); } ]
    [<K_CHARACTER> <K_SET> tk=<S_IDENTIFIER> { colDataType.setCharacterSet(tk.image); } ]

    {
        if (argumentsStringList.size() > 0)
            colDataType.setArgumentsStringList(argumentsStringList);
        return colDataType;
    }
}

CreateView CreateView():
{
    CreateView createView = new CreateView();
    Table view = null;
    SelectBody select = null;
    List<String> columnNames = null;
}
{
    <K_CREATE>
    [ <K_OR> <K_REPLACE> { createView.setOrReplace(true);} ]
    [ 
        <K_NO> <K_FORCE> { createView.setForce(ForceOption.NO_FORCE); } 
        | <K_FORCE> { createView.setForce(ForceOption.FORCE); }
    ]
    [
        <K_TEMP> { createView.setTemporary(TemporaryOption.TEMP); }
        | <K_TEMPORARY> { createView.setTemporary(TemporaryOption.TEMPORARY); }
    ]
    [ <K_MATERIALIZED> { createView.setMaterialized(true);} ]
    <K_VIEW> view=Table() { createView.setView(view); }
    [ columnNames = ColumnsNamesList() { createView.setColumnNames(columnNames); } ]
    <K_AS>
    select=SelectBody() { createView.setSelectBody(select); }
    { return createView; }
}

AlterView AlterView():
{
    AlterView alterView = new AlterView();
    Table view = null;
    SelectBody select = null;
    List<String> columnNames = null;
}
{
    <K_ALTER>
    <K_VIEW> view=Table() { alterView.setView(view); }
    [ columnNames = ColumnsNamesList() { alterView.setColumnNames(columnNames); } ]
    <K_AS>
    select=SelectBody() { alterView.setSelectBody(select); }
    { return alterView; }
}

List<String> CreateParameter():
{
    String retval = "";
    Token tk = null;
    Token tk2 = null;
    StringBuilder identifier = new StringBuilder("");
    Expression exp = null;
    List<String> param = new ArrayList<String>();
}
{
        (
            (((tk=<S_IDENTIFIER> | tk=<S_QUOTED_IDENTIFIER>) { identifier.append(tk.image); }
                ["." (tk2=<S_IDENTIFIER> | tk2=<S_QUOTED_IDENTIFIER>) { identifier.append("."); identifier.append(tk2.image); }])
                { param.add(identifier.toString()); })
            |
            tk=<K_NULL> { param.add(tk.image); }
            |
            tk=<K_NOT> { param.add(tk.image); }
            |
            tk=<K_PRIMARY> { param.add(tk.image); }
            |
            tk=<K_FOREIGN> { param.add(tk.image); }
            |
            tk=<K_REFERENCES> { param.add(tk.image); }
            |
            tk=<K_KEY> { param.add(tk.image); }
            |
            tk=<S_CHAR_LITERAL> { param.add(tk.image); }
            |
              ("+" {retval = "+";} | "-" {retval = "-";})?
              (
               tk=<S_LONG> { retval += tk.image; }
               |
               tk=<S_DOUBLE> { retval += tk.image; }
              ) 
              { param.add(retval); }
            |
            tk=<K_ON> { param.add(tk.image); } 
            |
            tk=<K_COMMIT> { param.add(tk.image); } 
            |
            tk=<K_ROWS> { param.add(tk.image); } 
            |
            tk=<K_UNIQUE> { param.add(tk.image); } 
            |
            tk=<K_CASCADE> { param.add(tk.image); } 
            |
            tk=<K_DELETE> { param.add(tk.image); } 
            |
            tk=<K_UPDATE> { param.add(tk.image); }
            |
            tk=<K_TIME_KEY_EXPR> { param.add(new TimeKeyExpression(tk.image).toString()); }
            |
            "=" { param.add("="); }
            |
            LOOKAHEAD(3) <K_USING> <K_INDEX> <K_TABLESPACE> retval=RelObjectName() { param.add("USING"); param.add("INDEX"); param.add("TABLESPACE"); param.add(retval); }
            |
            <K_TABLESPACE> retval=RelObjectName() { param.add("TABLESPACE"); param.add(retval); }
            |
            retval=AList() { param.add(retval); }
            |
            <K_CHECK>  ("(" exp = Expression() ")") { param.add("CHECK"); param.add("(" + exp.toString() + ")");}
            |
            tk=<K_CONSTRAINT> { param.add(tk.image); }
            |
            tk=<K_WITH> { param.add(tk.image); }
            |
            tk=<K_EXCLUDE> { param.add(tk.image); }
            |
            tk=<K_WHERE> { param.add(tk.image); }
			|
            tk=<K_UNSIGNED> { param.add(tk.image); }
            |
            tk=<K_TEMP> { param.add(tk.image); }
            |
            tk=<K_TEMPORARY> { param.add(tk.image); }

        )
    {return param;}
}

String AList():
{
    StringBuilder retval = new StringBuilder("(");
    Token tk = null;
    Token tk2 = null;
}
{
     "("

     ( (tk=<S_LONG> | tk=<S_DOUBLE> | tk=<S_CHAR_LITERAL> | tk=<S_IDENTIFIER> | tk=<S_QUOTED_IDENTIFIER>) { retval.append(tk.image); }
       [("," {retval.append(",");} | "=" {retval.append("=");})] )*

    ")"
    {
        retval.append(")");
        return retval.toString();
    }
}

String ColumnsNamesListItem(): 
{
	Token tk = null;
    String item = null;
} 
{
	(tk=<S_IDENTIFIER> | tk=<S_QUOTED_IDENTIFIER>) { item = tk.image; }
	[ "(" tk = <S_LONG>  ")" { item = item + "(" + tk.image + ")"; } ]
	{
		return item;
	}
}

List<String> ColumnsNamesList():
{
    List<String> retval = new ArrayList<String>();
    String img = null;
}
{
    "("
         img=ColumnsNamesListItem() { retval.add(img); }
         ( "," img=ColumnsNamesListItem() { retval.add(img); } )*

    ")"
    {
        return retval;
    }
}

Drop Drop():
{
    Drop drop = new Drop();
    Token tk = null;
    Table name;
    List<String> dropArgs = new ArrayList<String>();
}
{
    <K_DROP>
    (
        tk=<S_IDENTIFIER>
        |
        tk=<K_TABLE>
        |
        tk=<K_INDEX>
        |
        tk=<K_VIEW>
    )
    { drop.setType(tk.image); }

    [<K_IF> <K_EXISTS> {drop.setIfExists(true);} ]

    name = Table() { drop.setName(name); }
    ((tk=<S_IDENTIFIER> | tk=<K_CASCADE> | tk=<K_RESTRICT> ) { dropArgs.add(tk.image); })*

    {
        if (dropArgs.size() > 0)
            drop.setParameters(dropArgs);
        return drop;
    }
}

Truncate Truncate():
{
    Truncate truncate = new Truncate();
    Table table;
}
{
    <K_TRUNCATE> <K_TABLE>
	table=Table() { truncate.setTable(table); truncate.setCascade(false); } [ <K_CASCADE> {truncate.setCascade(true);} ]
    {
        return truncate;
    }
}


AlterExpression.ColumnDataType AlterExpressionColumnDataType():
{
    String columnName = null;
    ColDataType dataType = null;
    List<String> columnSpecs = null;
    List<String> parameter = null;
}
{
    columnName = RelObjectName()
    dataType = ColDataType() { columnSpecs = new ArrayList(); }
    ( parameter = CreateParameter() { columnSpecs.addAll(parameter); } )*
    {
        return new AlterExpression.ColumnDataType(columnName, dataType, columnSpecs);
    }
}

List<ConstraintState> AlterExpressionConstraintState():
{
    List<ConstraintState> retval = new ArrayList<ConstraintState>();
}
{
    (
        (
          <K_DEFERRABLE> {retval.add(new DeferrableConstraint(false));}
        )
        |
        (
          <K_NOT> <K_DEFERRABLE> {retval.add(new DeferrableConstraint(true));}
        ) 
        |
        (
          <K_VALIDATE> {retval.add(new ValidateConstraint(false));}
        )
        |
        (
          <K_NOVALIDATE> {retval.add(new ValidateConstraint(true));}
        )
        |
        (
          <K_ENABLE> {retval.add(new EnableConstraint(false));}
        )
        |
        (
          <K_DISABLE> {retval.add(new EnableConstraint(true));}
        )
    )*
    {
        return retval;
    }
}



AlterExpression AlterExpression():
{
    AlterExpression alterExp = new AlterExpression();
    Token tk;
    Token tk2 = null;
    String sk3 = null;
    ColDataType dataType;
    List<String> columnNames = null;
    List<ConstraintState> constraints = null;
    ForeignKeyIndex fkIndex = null;
    NamedConstraint index = null;
    Table fkTable = null;
    AlterExpression.ColumnDataType alterExpressionColumnDataType = null;
}
{

    (
    ((<K_ADD>    { alterExp.setOperation(AlterOperation.ADD); } | <K_MODIFY> { alterExp.setOperation(AlterOperation.MODIFY); })
      (
		LOOKAHEAD(2) ( <K_PRIMARY> <K_KEY> columnNames=ColumnsNamesList() { alterExp.setPkColumns(columnNames); } ) constraints=AlterExpressionConstraintState() { alterExp.setConstraints(constraints); }
		|
        ( (LOOKAHEAD(2) <K_COLUMN>)?
            alterExpressionColumnDataType = AlterExpressionColumnDataType() { alterExp.addColDataType(alterExpressionColumnDataType); }
        )
        |
        (
            "(" alterExpressionColumnDataType = AlterExpressionColumnDataType() { alterExp.addColDataType(alterExpressionColumnDataType); }
                ("," alterExpressionColumnDataType = AlterExpressionColumnDataType() { alterExp.addColDataType(alterExpressionColumnDataType); } )* ")"
        )
        |
        ( <K_UNIQUE> <K_KEY> (tk=<S_IDENTIFIER>    | tk=<S_QUOTED_IDENTIFIER>) columnNames=ColumnsNamesList() { alterExp.setUkName(tk.image); alterExp.setUkColumns(columnNames); } )
        |
//following two choices regarding foreign keys should be merged
        ( <K_FOREIGN> <K_KEY> columnNames=ColumnsNamesList() { alterExp.setFkColumns(columnNames); }
             <K_REFERENCES> tk=<S_IDENTIFIER> columnNames=ColumnsNamesList()
                    { alterExp.setFkSourceTable(tk.image); alterExp.setFkSourceColumns(columnNames); }
            [<K_ON> <K_DELETE>
                            (<K_CASCADE> { alterExp.setOnDeleteCascade(true); }
                            | <K_RESTRICT> { alterExp.setOnDeleteRestrict(true); }
                            | <K_SET> <K_NULL> { alterExp.setOnDeleteSetNull(true); } ) ]
        )
        |
        (
            <K_CONSTRAINT> sk3=RelObjectName()

            ( ( tk=<K_FOREIGN> tk2=<K_KEY>
                columnNames=ColumnsNamesList()
                {
                    fkIndex = new ForeignKeyIndex();
                    fkIndex.setName(sk3);
                    fkIndex.setType(tk.image + " " + tk2.image);
                    fkIndex.setColumnsNames(columnNames);
                }
                <K_REFERENCES> fkTable=Table() columnNames=ColumnsNamesList()
                {
                    fkIndex.setTable(fkTable);
                    fkIndex.setReferencedColumnNames(columnNames);
                    alterExp.setIndex(fkIndex);
                }
                constraints=AlterExpressionConstraintState() { alterExp.setConstraints(constraints); }
            )
            |
            ( tk=<K_PRIMARY> tk2=<K_KEY>
                columnNames=ColumnsNamesList()
                {
                    index = new NamedConstraint();
                    index.setName(sk3);
                    index.setType(tk.image + " " + tk2.image);
                    index.setColumnsNames(columnNames);
                    alterExp.setIndex(index);
                }
                constraints=AlterExpressionConstraintState() { alterExp.setConstraints(constraints); }
            )
            |
            (
                <K_CHECK>  {Expression exp = null;} ("(" exp = Expression() ")")* {
                CheckConstraint checkCs = new CheckConstraint();
                checkCs.setName(sk3);
                checkCs.setExpression(exp);
                alterExp.setIndex(checkCs);
            }
            )
            |
            (
                tk=<K_UNIQUE> tk2=<K_KEY>
                  columnNames=ColumnsNamesList()
                  {
                      index = new NamedConstraint();
                      index.setName(sk3);
                      index.setType(tk.image + " " + tk2.image);
                      index.setColumnsNames(columnNames);
                      alterExp.setIndex(index);
                  }
                  constraints=AlterExpressionConstraintState() { alterExp.setConstraints(constraints); }
            )
            |
            (
                tk=<K_KEY>
                  columnNames=ColumnsNamesList()
                  {
                      index = new NamedConstraint();
                      index.setName(sk3);
                      index.setType(tk.image);
                      index.setColumnsNames(columnNames);
                      alterExp.setIndex(index);
                  }
                  constraints=AlterExpressionConstraintState() { alterExp.setConstraints(constraints); }
            ) )
        )
        )
    )
    |
    (<K_DROP>
      {
            alterExp.setOperation(AlterOperation.DROP);
        }
         (
             (  (LOOKAHEAD(2) <K_COLUMN>)?
                (tk=<S_IDENTIFIER>    | tk=<S_QUOTED_IDENTIFIER>)
                     {
                            alterExp.setColumnName(tk.image);
                     }
                [tk=<K_CASCADE> { alterExp.addParameters(tk.image); } ]
                  
             )
             |
       (  <K_CONSTRAINT>
       (tk=<S_IDENTIFIER>    | tk=<S_QUOTED_IDENTIFIER>)
           {
              alterExp.setConstraintName(tk.image);
           }
       )
       )
    )
    )

    {
        return alterExp;
    }
}


Alter AlterTable():
{
    Alter alter = new Alter();
    Table table;
    AlterExpression alterExp;

}
{
    <K_ALTER> <K_TABLE> table=Table() { alter.setTable(table); }
     ( alterExp=AlterExpression() { alter.addAlterExpression(alterExp); }
       ("," alterExp=AlterExpression() { alter.addAlterExpression(alterExp); } )*
     )

    {
        return alter;
    }
}

Wait Wait():
{
    Wait wait = new Wait();
    Token token = null;
}
{
    // sqlserver-oracle-> WAIT (TIMEOUT) 
    // https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_10002.htm#i2126016
    <K_WAIT> token=<S_LONG> { wait.setTimeout(Long.parseLong(token.image)); }
    
    {
        return wait;
    }
}

Commit Commit():
{
  Commit commit=new Commit();
}
{
  <K_COMMIT>
  {
    return commit;
  }
}
