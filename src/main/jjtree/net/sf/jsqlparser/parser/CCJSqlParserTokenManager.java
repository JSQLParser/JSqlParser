/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2014 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */

package net.sf.jsqlparser.parser;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.test.upsert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.merge.*;
import java.util.*;

/** Token Manager. */
public class CCJSqlParserTokenManager implements CCJSqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000001080010L) != 0L || (active1 & 0x100L) != 0L || (active2 & 0x40a0L) != 0L)
         {
            jjmatchedKind = 159;
            return 89;
         }
         if ((active3 & 0x1000L) != 0L)
            return 35;
         if ((active2 & 0x2000000000000000L) != 0L)
            return 19;
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 159;
            return 9;
         }
         if ((active2 & 0x600000000000000L) != 0L || (active3 & 0x180L) != 0L)
            return 16;
         if ((active2 & 0x200000000000L) != 0L)
            return 152;
         if ((active0 & 0x100000048000000L) != 0L || (active1 & 0x20040208d00400L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 159;
            return 64;
         }
         if ((active0 & 0xfe7ff7beb6f6ffecL) != 0L || (active1 & 0xffdffbfdf72ffa7fL) != 0L || (active2 & 0x2975dL) != 0L)
         {
            jjmatchedKind = 159;
            return 27;
         }
         if ((active0 & 0x4100010000L) != 0L || (active1 & 0x80L) != 0L || (active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 159;
            return 133;
         }
         if ((active2 & 0x20400000000000L) != 0L)
            return 153;
         if ((active2 & 0x40000000000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0xdbecffffffef5e00L) != 0L || (active1 & 0xfaeffbffdffbfdffL) != 0L || (active2 & 0x397f7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 1;
            }
            return 27;
         }
         if ((active0 & 0x241300000010a1fcL) != 0L || (active1 & 0x510000020040200L) != 0L || (active2 & 0x4008L) != 0L)
            return 27;
         if ((active1 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 1;
            }
            return 63;
         }
         return -1;
      case 2:
         if ((active0 & 0xfffff5fffffa0000L) != 0L || (active1 & 0xfafff3defef7ffffL) != 0L || (active2 & 0x3d7f7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 2;
            }
            return 27;
         }
         if ((active1 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 2;
            }
            return 62;
         }
         if ((active0 & 0xa000005fe00L) != 0L || (active1 & 0x82101080000L) != 0L)
            return 27;
         return -1;
      case 3:
         if ((active0 & 0xfffff54008820000L) != 0L || (active1 & 0xb264f3cafeffdbf7L) != 0L || (active2 & 0x3c3f7L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 3;
            }
            return 27;
         }
         if ((active1 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 3;
            }
            return 61;
         }
         if ((active0 & 0xbff7780000L) != 0L || (active1 & 0x489b003400002408L) != 0L || (active2 & 0x1400L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active1 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 4;
            }
            return 60;
         }
         if ((active0 & 0x7ff54008800000L) != 0L || (active1 & 0x9004004c94401001L) != 0L || (active2 & 0x10000L) != 0L)
            return 27;
         if ((active0 & 0xff80002000020000L) != 0L || (active1 & 0x22e2f3826abfcbfeL) != 0L || (active2 & 0x2c3f7L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 4;
            }
            return 27;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000020000L) != 0L || (active1 & 0x320293806abfc3fcL) != 0L || (active2 & 0x381e7L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 5;
            return 27;
         }
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 5;
            return 59;
         }
         if ((active0 & 0xff80000000000000L) != 0L || (active1 & 0xe0600200000803L) != 0L || (active2 & 0x4210L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active1 & 0x3200938040b64388L) != 0L || (active2 & 0x18164L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active1 & 0x40000000000L) != 0L)
            return 58;
         if ((active0 & 0x2000020000L) != 0L || (active1 & 0x200002a098074L) != 0L || (active2 & 0x20083L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active1 & 0x3200138000b24200L) != 0L || (active2 & 0x18160L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active1 & 0x800040040188L) != 0L || (active2 & 0x4L) != 0L)
            return 27;
         return -1;
      case 8:
         if ((active1 & 0x2200138000804200L) != 0L || (active2 & 0x8020L) != 0L)
            return 27;
         if ((active1 & 0x1000000000320000L) != 0L || (active2 & 0x10140L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active1 & 0x1000000000020000L) != 0L || (active2 & 0x140L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 9;
            return 27;
         }
         if ((active1 & 0x300000L) != 0L || (active2 & 0x10000L) != 0L)
            return 27;
         return -1;
      case 10:
         if ((active1 & 0x1000000000020000L) != 0L || (active2 & 0x140L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 10;
            return 27;
         }
         return -1;
      case 11:
         if ((active1 & 0x1000000000020000L) != 0L || (active2 & 0x40L) != 0L)
            return 27;
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 11;
            return 27;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc000000400000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x600L);
      case 37:
         return jjStopAtPos(0, 190);
      case 38:
         return jjStopAtPos(0, 188);
      case 40:
         return jjStopAtPos(0, 167);
      case 41:
         return jjStopAtPos(0, 168);
      case 42:
         return jjStopAtPos(0, 169);
      case 43:
         return jjStopAtPos(0, 172);
      case 44:
         return jjStopAtPos(0, 166);
      case 45:
         jjmatchedKind = 185;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000000000L, 0x180L);
      case 46:
         return jjStartNfaWithStates_0(0, 170, 5);
      case 47:
         return jjStartNfaWithStates_0(0, 189, 19);
      case 58:
         jjmatchedKind = 197;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10L);
      case 59:
         return jjStopAtPos(0, 146);
      case 60:
         jjmatchedKind = 174;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 165);
      case 62:
         return jjStartNfaWithStates_0(0, 173, 152);
      case 63:
         jjmatchedKind = 171;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc0000000000000L, 0x0L);
      case 64:
         jjmatchedKind = 198;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10800000000000L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 204, 35);
      case 93:
         return jjStopAtPos(0, 205);
      case 94:
         return jjStopAtPos(0, 191);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8e04L, 0x180000000L, 0x10L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000000008L, 0x200001000040L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000048000000L, 0x20040208d00400L, 0x2L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000001080010L, 0x100L, 0x40a0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000200040000L, 0x3000000008802L, 0x20000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20810000000L, 0x4020800080008L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x1000000000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x100L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2003000000900060L, 0x100000000040200L, 0x200L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x800000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000004400000L, 0x1000010000L, 0x40L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000021000L, 0x1L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x202000L, 0x8000420000010L, 0x8L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x418000020000180L, 0x410000000002000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40000020000L, 0x10010004004L, 0x8000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x200586000200020L, 0x4L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200000400004000L, 0x6000000044000000L, 0x400L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4100010000L, 0x80L, 0x10000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0xc000300000000000L, 0x40808000000000L, 0x0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40008000000000L, 0x2000001L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x13080000000L, 0x80000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L, 0x0L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80dL);
      case 124:
         jjmatchedKind = 187;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 193);
      case 126:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 186);
         break;
      case 38:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 183);
         break;
      case 42:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 177);
         break;
      case 58:
         if ((active3 & 0x10L) != 0L)
            return jjStopAtPos(1, 196);
         break;
      case 61:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 62:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 180);
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x500L);
      case 64:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 175);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 181);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040004040000000L, active1, 0x5002034411L, active2, 0x10003L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 68:
      case 100:
         if ((active3 & 0x1L) != 0L)
            return jjStopAtPos(1, 192);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2808000040a5000L, active1, 0xaa0c500000200060L, active2, 0x484L, active3, 0L);
      case 70:
      case 102:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 120, 27);
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0x800L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10180000000L, active1, 0xc00000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2404b000400000L, active1, 0x80200841001100L, active2, 0x100L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200800200L, active1, 0x80000000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2003200000140c00L, active1, 0x50808000040200L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20402012000L, active1, 0x200a2228180000L, active2, 0x5040L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000020000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x110400019000000L, active1, 0x1000010010000084L, active2, 0x8000L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 27);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000008000L, active1, 0x2L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L, active3, 0x8L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000800200000L, active1, 0x40400000008L, active2, 0x20L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x3000000008800L, active2, 0x20000L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 27);
         break;
      case 124:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 182);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 184);
         break;
      case 126:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 179);
         break;
      case 62:
         if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(2, 200);
         else if ((active3 & 0x400L) != 0L)
            return jjStopAtPos(2, 202);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4800000L, active2, 0L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x8040000000L, active2, 0x10000L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000020000802L, active2, 0x20000L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 27);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 27);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x8011000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000181a0000000L, active1, 0x803010000402000L, active2, 0x8000L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000004000000L, active1, 0x200000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20800000000000L, active1, 0x400000000000L, active2, 0x100L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800300002800000L, active1, 0x4040000010000004L, active2, 0L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 27);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x2c0000800200000L, active1, 0x10820600000009L, active2, 0x80L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000400000000L, active1, 0x20000000000000L, active2, 0x400L, active3, 0L);
      case 78:
      case 110:
         if ((active3 & 0x800L) != 0L)
            return jjStopAtPos(2, 203);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x204008101000L, active2, 0x1200L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400019000000L, active1, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000020L, active2, 0x20L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x8000040802084000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(2, 195);
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000240080000L, active1, 0x1000000500L, active2, 0x6L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 27);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 27);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x8003000100000L, active1, 0x84100080078250L, active2, 0x11L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L, active2, 0x4000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000040000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0x40L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 27);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8100000000000000L, active1, 0x2000200000000002L, active2, 0x80L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 67:
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 27);
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x6010000400000L, active2, 0x8003L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 27);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 27);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 27);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 27);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x629b000000000000L, active1, 0x4000802f0a00L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000004000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20002000000000L, active1, 0x80000000000000L, active2, 0x100L);
      case 73:
      case 105:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x1004800000000000L, active1, 0L, active2, 0x10L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x20440000028L, active2, 0x30020L);
      case 77:
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000004L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 27);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 27);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 27);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x8000080L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x240000000000L, active1, 0x808010000000L, active2, 0x200L);
      case 80:
      case 112:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 27);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 27);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 126, 27);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x40004808000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000008000000L, active1, 0x800100000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 27);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 27);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 27);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4100L, active2, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40400000000000L, active1, 0x1200100200001011L, active2, 0L);
      case 87:
      case 119:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x22000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x808024L, active2, 0x2L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x20000080L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 27);
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 27);
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 27);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000020000L, active1, 0x50008000041L, active2, 0x10000L);
      case 71:
      case 103:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xa0000042084100L, active2, 0x8020L);
      case 75:
      case 107:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 27);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 27);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x20000000000L, active2, 0x10L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000802L, active2, 0x40L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 27);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 27);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 27);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 27);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000000L, active1, 0x2200300000270210L, active2, 0x204L);
      case 83:
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 27);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 27);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 27);
         break;
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 27);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 27);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 27);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 27);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x8980000000000000L, active1, 0x100008L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x42008000000000L, active2, 0x20000L);
      case 88:
      case 120:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000010090L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8808020L, active2, 0x20L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0x20002L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 27);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 27);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 27);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 27);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 27);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 27);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 142, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200048L, active2, 0x81L);
      case 71:
      case 103:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000080000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0x4L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 27);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 27);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x148042000100L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100004L, active2, 0x40L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 27);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000200L, active2, 0x18000L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 27);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 27);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 27);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 27);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 27);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000004000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x160000L, active2, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000100L, active2, 0x4L);
      case 68:
      case 100:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 128, 27);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 135, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 27);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 27);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 113, 27);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 129, 27);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 145, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000200L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200130000004000L, active2, 0x8040L);
      case 76:
      case 108:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 27);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 27);
         break;
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 27);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 27);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 27);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 27);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 27);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 58);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000800080L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x10000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0x200200L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 111, 27);
         break;
      case 69:
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 27);
         return jjMoveStringLiteralDfa8_0(active1, 0x8000800000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x100000L, active2, 0x100L);
      case 76:
      case 108:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 27);
         return jjMoveStringLiteralDfa8_0(active1, 0x20000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active1, 0x130000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x3000000000004000L, active2, 0x8040L);
      case 83:
      case 115:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 27);
         break;
      case 84:
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 27);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 27);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 130, 27);
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x20L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active1, 0x200000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x10000L);
      case 68:
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 103, 27);
         break;
      case 69:
      case 101:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 121, 27);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 133, 27);
         return jjMoveStringLiteralDfa9_0(active1, 0x200000L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 27);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 27);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 108, 27);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 27);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 143, 27);
         return jjMoveStringLiteralDfa9_0(active1, 0x1000000000100000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x100L);
      case 82:
      case 114:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 87, 27);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 125, 27);
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x40L);
      case 84:
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x1000000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 144, 27);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x100L);
      case 83:
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 85, 27);
         break;
      case 84:
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 27);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active1, 0x20000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x100L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 27);
         break;
      case 84:
      case 116:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 124, 27);
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x100L);
      case 89:
      case 121:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(11, 134, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, 0L, active2, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 136, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, 0L, active2, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 152;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 153:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  else if (curChar == 62)
                  {
                     if (kind > 149)
                        kind = 149;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 148)
                        kind = 148;
                  }
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 133:
               case 27:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 152:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  else if (curChar == 61)
                  {
                     if (kind > 147)
                        kind = 147;
                  }
                  break;
               case 59:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 153)
                        kind = 153;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 60)
                     jjCheckNAddStates(7, 10);
                  else if (curChar == 39)
                     jjCheckNAddStates(11, 16);
                  else if (curChar == 34)
                     jjCheckNAdd(29);
                  else if (curChar == 36)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(2, 3);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 89:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 62:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 60:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 9:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 39)
                     jjCheckNAdd(10);
                  break;
               case 63:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 58:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 61:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 64:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 1:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 61 && kind > 147)
                     kind = 147;
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAdd(8);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 155)
                     kind = 155;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar != 45)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 42)
                     jjCheckNAddStates(17, 19);
                  break;
               case 22:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 21);
                  break;
               case 23:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 21);
                  break;
               case 24:
                  if (curChar == 47 && kind > 158)
                     kind = 158;
                  break;
               case 25:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 26:
                  if (curChar != 36)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar == 34)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 34 && kind > 163)
                     kind = 163;
                  break;
               case 32:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 35:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 16);
                  break;
               case 40:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 41:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 42:
                  if (curChar == 39 && kind > 162)
                     kind = 162;
                  break;
               case 43:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 44:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 48:
                  if (curChar == 41 && kind > 141)
                     kind = 141;
                  break;
               case 49:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 91:
                  if ((0x100002600L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x100002600L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 96:
                  if ((0x100002600L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 114:
                  if (curChar == 60)
                     jjCheckNAddStates(7, 10);
                  break;
               case 115:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 116:
                  if (curChar == 61 && kind > 148)
                     kind = 148;
                  break;
               case 117:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 118:
                  if (curChar == 62 && kind > 149)
                     kind = 149;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 153)
                     kind = 153;
                  jjCheckNAddStates(0, 6);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(120, 4);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 122:
                  if (curChar != 46)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 124:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(125);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAdd(125);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(126, 127);
                  break;
               case 128:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(129);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAdd(129);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 153)
                     kind = 153;
                  jjCheckNAdd(130);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 133:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 59:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 96)
                     jjCheckNAdd(32);
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(28, 31);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(32, 33);
                  else if ((0x800000008L & l) != 0L)
                     jjAddStates(34, 36);
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 89:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 62:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 60:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 9:
               case 27:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 63:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 58:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 68;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 61:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 64:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(27);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 12:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAdd(14);
                  break;
               case 17:
                  if (kind > 157)
                     kind = 157;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
               case 23:
                  jjCheckNAddTwoStates(23, 21);
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 29:
                  jjAddStates(41, 42);
                  break;
               case 31:
                  if (curChar == 96)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 96 && kind > 163)
                     kind = 163;
                  break;
               case 34:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
               case 36:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 93 && kind > 163)
                     kind = 163;
                  break;
               case 39:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 41:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 45:
                  jjCheckNAddStates(25, 27);
                  break;
               case 46:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(34, 36);
                  break;
               case 47:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 51:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 65:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(49);
                  break;
               case 66:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(65);
                  break;
               case 67:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(65);
                  break;
               case 77:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 88:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 90:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 92:
                  if ((0x80000000800000L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 93:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 95:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L && kind > 151)
                     kind = 151;
                  break;
               case 98:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 102:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 105:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 107:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(90);
                  break;
               case 113:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 123:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 127:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 131:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(28, 31);
                  break;
               case 132:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 134:
                  if ((0x1000000010000L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 135:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(90);
                  break;
               case 143:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 145:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 133:
               case 27:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 59:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 89:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 62:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 60:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 9:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 63:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 58:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 61:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 64:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(27);
                  break;
               case 17:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(23, 21);
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 42);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 21);
                  break;
               case 35:
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  break;
               case 45:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(25, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 152 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   120, 4, 121, 122, 126, 127, 130, 115, 116, 117, 118, 39, 41, 42, 44, 45, 
   42, 21, 22, 24, 32, 33, 39, 41, 42, 44, 45, 42, 133, 141, 143, 151, 
   89, 113, 64, 75, 85, 7, 8, 10, 11, 29, 30, 105, 111, 124, 125, 128, 
   129, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\73", null, null, null, "\41\75", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\75", 
"\54", "\50", "\51", "\52", "\56", "\77", "\53", "\76", "\74", "\100\100", "\176", 
"\176\52", "\41\176", "\41\176\52", "\100\76", "\74\100", "\77\174", "\77\46", 
"\174\174", "\55", "\55\43", "\174", "\46", "\57", "\45", "\136", null, "\175", null, null, 
"\72\72", "\72", "\100", "\55\76", "\55\76\76", "\43\76", "\43\76\76", null, "\133", 
"\135", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0xffffffec8bffffffL, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x60000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x60000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[152];
private final int[] jjstateSet = new int[304];
protected char curChar;
/** Constructor. */
public CCJSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CCJSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 152; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
